import { Injectable, Injector, inject } from '@angular/core';
import { STORAGE_ENGINE, ɵextractStringKey, ɵisKeyWithExplicitEngine, ɵNGXS_STORAGE_PLUGIN_OPTIONS } from '@ngxs/storage-plugin/internals';
import * as i0 from "@angular/core";
export class ɵNgxsStoragePluginKeysManager {
    constructor() {
        /** Store keys separately in a set so we're able to check if the key already exists. */
        this._keys = new Set();
        this._injector = inject(Injector);
        this._keysWithEngines = [];
        const { keys } = inject(ɵNGXS_STORAGE_PLUGIN_OPTIONS);
        this.addKeys(keys);
    }
    getKeysWithEngines() {
        // Spread to prevent external code from directly modifying the internal state.
        return [...this._keysWithEngines];
    }
    addKeys(storageKeys) {
        for (const storageKey of storageKeys) {
            const key = ɵextractStringKey(storageKey);
            // The user may call `withStorageFeature` with the same state multiple times.
            // Let's prevent duplicating state names in the `keysWithEngines` list.
            // Please note that calling provideStates multiple times with the same state is
            // acceptable behavior. This may occur because the state could be necessary at the
            // feature level, and different parts of the application might require its registration.
            // Consequently, `withStorageFeature` may also be called multiple times.
            if (this._keys.has(key)) {
                continue;
            }
            this._keys.add(key);
            const engine = ɵisKeyWithExplicitEngine(storageKey)
                ? this._injector.get(storageKey.engine)
                : this._injector.get(STORAGE_ENGINE);
            this._keysWithEngines.push({ key, engine });
        }
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵNgxsStoragePluginKeysManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵNgxsStoragePluginKeysManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵNgxsStoragePluginKeysManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmFnZS1wbHVnaW4vc3JjL2tleXMtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUNMLGNBQWMsRUFHZCxpQkFBaUIsRUFDakIsd0JBQXdCLEVBQ3hCLDRCQUE0QixFQUM3QixNQUFNLGdDQUFnQyxDQUFDOztBQVF4QyxNQUFNLE9BQU8sNkJBQTZCO0lBUXhDO1FBUEEsdUZBQXVGO1FBQ3RFLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBRTFCLGNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFN0IscUJBQWdCLEdBQW9CLEVBQUUsQ0FBQztRQUd0RCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLDhFQUE4RTtRQUM5RSxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsT0FBTyxDQUFDLFdBQXlCO1FBQy9CLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFLENBQUM7WUFDckMsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFMUMsNkVBQTZFO1lBQzdFLHVFQUF1RTtZQUN2RSwrRUFBK0U7WUFDL0Usa0ZBQWtGO1lBQ2xGLHdGQUF3RjtZQUN4Rix3RUFBd0U7WUFDeEUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN4QixTQUFTO1lBQ1gsQ0FBQztZQUVELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXBCLE1BQU0sTUFBTSxHQUFHLHdCQUF3QixDQUFDLFVBQVUsQ0FBQztnQkFDakQsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3ZDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUV2QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNILENBQUM7aUlBeENVLDZCQUE2QjtxSUFBN0IsNkJBQTZCLGNBRGhCLE1BQU07OzJGQUNuQiw2QkFBNkI7a0JBRHpDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgU1RPUkFHRV9FTkdJTkUsXG4gIFN0b3JhZ2VFbmdpbmUsXG4gIFN0b3JhZ2VLZXksXG4gIMm1ZXh0cmFjdFN0cmluZ0tleSxcbiAgybVpc0tleVdpdGhFeHBsaWNpdEVuZ2luZSxcbiAgybVOR1hTX1NUT1JBR0VfUExVR0lOX09QVElPTlNcbn0gZnJvbSAnQG5neHMvc3RvcmFnZS1wbHVnaW4vaW50ZXJuYWxzJztcblxuaW50ZXJmYWNlIEtleVdpdGhFbmdpbmUge1xuICBrZXk6IHN0cmluZztcbiAgZW5naW5lOiBTdG9yYWdlRW5naW5lO1xufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIMm1Tmd4c1N0b3JhZ2VQbHVnaW5LZXlzTWFuYWdlciB7XG4gIC8qKiBTdG9yZSBrZXlzIHNlcGFyYXRlbHkgaW4gYSBzZXQgc28gd2UncmUgYWJsZSB0byBjaGVjayBpZiB0aGUga2V5IGFscmVhZHkgZXhpc3RzLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9rZXlzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2tleXNXaXRoRW5naW5lczogS2V5V2l0aEVuZ2luZVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgeyBrZXlzIH0gPSBpbmplY3QoybVOR1hTX1NUT1JBR0VfUExVR0lOX09QVElPTlMpO1xuICAgIHRoaXMuYWRkS2V5cyhrZXlzKTtcbiAgfVxuXG4gIGdldEtleXNXaXRoRW5naW5lcygpIHtcbiAgICAvLyBTcHJlYWQgdG8gcHJldmVudCBleHRlcm5hbCBjb2RlIGZyb20gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoZSBpbnRlcm5hbCBzdGF0ZS5cbiAgICByZXR1cm4gWy4uLnRoaXMuX2tleXNXaXRoRW5naW5lc107XG4gIH1cblxuICBhZGRLZXlzKHN0b3JhZ2VLZXlzOiBTdG9yYWdlS2V5W10pOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IHN0b3JhZ2VLZXkgb2Ygc3RvcmFnZUtleXMpIHtcbiAgICAgIGNvbnN0IGtleSA9IMm1ZXh0cmFjdFN0cmluZ0tleShzdG9yYWdlS2V5KTtcblxuICAgICAgLy8gVGhlIHVzZXIgbWF5IGNhbGwgYHdpdGhTdG9yYWdlRmVhdHVyZWAgd2l0aCB0aGUgc2FtZSBzdGF0ZSBtdWx0aXBsZSB0aW1lcy5cbiAgICAgIC8vIExldCdzIHByZXZlbnQgZHVwbGljYXRpbmcgc3RhdGUgbmFtZXMgaW4gdGhlIGBrZXlzV2l0aEVuZ2luZXNgIGxpc3QuXG4gICAgICAvLyBQbGVhc2Ugbm90ZSB0aGF0IGNhbGxpbmcgcHJvdmlkZVN0YXRlcyBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lIHN0YXRlIGlzXG4gICAgICAvLyBhY2NlcHRhYmxlIGJlaGF2aW9yLiBUaGlzIG1heSBvY2N1ciBiZWNhdXNlIHRoZSBzdGF0ZSBjb3VsZCBiZSBuZWNlc3NhcnkgYXQgdGhlXG4gICAgICAvLyBmZWF0dXJlIGxldmVsLCBhbmQgZGlmZmVyZW50IHBhcnRzIG9mIHRoZSBhcHBsaWNhdGlvbiBtaWdodCByZXF1aXJlIGl0cyByZWdpc3RyYXRpb24uXG4gICAgICAvLyBDb25zZXF1ZW50bHksIGB3aXRoU3RvcmFnZUZlYXR1cmVgIG1heSBhbHNvIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgIGlmICh0aGlzLl9rZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9rZXlzLmFkZChrZXkpO1xuXG4gICAgICBjb25zdCBlbmdpbmUgPSDJtWlzS2V5V2l0aEV4cGxpY2l0RW5naW5lKHN0b3JhZ2VLZXkpXG4gICAgICAgID8gdGhpcy5faW5qZWN0b3IuZ2V0KHN0b3JhZ2VLZXkuZW5naW5lKVxuICAgICAgICA6IHRoaXMuX2luamVjdG9yLmdldChTVE9SQUdFX0VOR0lORSk7XG5cbiAgICAgIHRoaXMuX2tleXNXaXRoRW5naW5lcy5wdXNoKHsga2V5LCBlbmdpbmUgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=