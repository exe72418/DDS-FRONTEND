/// <reference types="jest" />
export function skipConsoleLogging(fn) {
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation(() => { }),
        jest.spyOn(console, 'warn').mockImplementation(() => { }),
        jest.spyOn(console, 'error').mockImplementation(() => { }),
        jest.spyOn(console, 'info').mockImplementation(() => { })
    ];
    function restoreSpies() {
        consoleSpies.forEach(spy => spy.mockRestore());
    }
    let restoreSpyAsync = false;
    try {
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return returnValue.finally(() => restoreSpies());
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1jb25zb2xlLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy9zcmMvc2tpcC1jb25zb2xlLWxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBRTlCLE1BQU0sVUFBVSxrQkFBa0IsQ0FBb0MsRUFBSztJQUN6RSxNQUFNLFlBQVksR0FBRztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7S0FDekQsQ0FBQztJQUNGLFNBQVMsWUFBWTtRQUNuQixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNELElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQztJQUM1QixJQUFJLENBQUM7UUFDSCxNQUFNLFdBQVcsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUN6QixJQUFJLFdBQVcsWUFBWSxPQUFPLEVBQUUsQ0FBQztZQUNuQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBa0IsQ0FBQztRQUNwRSxDQUFDO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztZQUFTLENBQUM7UUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDckIsWUFBWSxFQUFFLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJqZXN0XCIgLz5cblxuZXhwb3J0IGZ1bmN0aW9uIHNraXBDb25zb2xlTG9nZ2luZzxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBUKTogUmV0dXJuVHlwZTxUPiB7XG4gIGNvbnN0IGNvbnNvbGVTcGllcyA9IFtcbiAgICBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KSxcbiAgICBqZXN0LnNweU9uKGNvbnNvbGUsICdpbmZvJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KVxuICBdO1xuICBmdW5jdGlvbiByZXN0b3JlU3BpZXMoKSB7XG4gICAgY29uc29sZVNwaWVzLmZvckVhY2goc3B5ID0+IHNweS5tb2NrUmVzdG9yZSgpKTtcbiAgfVxuICBsZXQgcmVzdG9yZVNweUFzeW5jID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3QgcmV0dXJuVmFsdWUgPSBmbigpO1xuICAgIGlmIChyZXR1cm5WYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgIHJlc3RvcmVTcHlBc3luYyA9IHRydWU7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWUuZmluYWxseSgoKSA9PiByZXN0b3JlU3BpZXMoKSkgYXMgUmV0dXJuVHlwZTxUPjtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICghcmVzdG9yZVNweUFzeW5jKSB7XG4gICAgICByZXN0b3JlU3BpZXMoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==