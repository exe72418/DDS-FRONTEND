import { createSelector } from './create-selector';
import { ensureValidSelector, ensureValueProvided } from './selector-checks.util';
export function createModelSelector(selectorMap) {
    const selectorKeys = Object.keys(selectorMap);
    const selectors = Object.values(selectorMap);
    if (typeof ngDevMode !== 'undefined' && ngDevMode) {
        ensureValidSelectorMap({
            prefix: '[createModelSelector]',
            selectorMap,
            selectorKeys,
            selectors
        });
    }
    return createSelector(selectors, (...args) => {
        return selectorKeys.reduce((obj, key, index) => {
            obj[key] = args[index];
            return obj;
        }, {});
    });
}
function ensureValidSelectorMap({ prefix, selectorMap, selectorKeys, selectors }) {
    ensureValueProvided(selectorMap, { prefix, noun: 'selector map' });
    ensureValueProvided(typeof selectorMap === 'object', { prefix, noun: 'valid selector map' });
    ensureValueProvided(selectorKeys.length, { prefix, noun: 'non-empty selector map' });
    selectors.forEach((selector, index) => ensureValidSelector(selector, {
        prefix,
        noun: `selector for the '${selectorKeys[index]}' property`
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1vZGVsLXNlbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvc3JjL3NlbGVjdG9ycy9jcmVhdGUtbW9kZWwtc2VsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBYWxGLE1BQU0sVUFBVSxtQkFBbUIsQ0FBd0IsV0FBYztJQUN2RSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFN0MsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxFQUFFLENBQUM7UUFDbEQsc0JBQXNCLENBQUk7WUFDeEIsTUFBTSxFQUFFLHVCQUF1QjtZQUMvQixXQUFXO1lBQ1gsWUFBWTtZQUNaLFNBQVM7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUMzQyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzVDLEdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBcUIsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBcUIsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBd0IsRUFDckQsTUFBTSxFQUNOLFdBQVcsRUFDWCxZQUFZLEVBQ1osU0FBUyxFQU1WO0lBQ0MsbUJBQW1CLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLG1CQUFtQixDQUFDLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQzdGLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUNyRixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ3BDLG1CQUFtQixDQUFDLFFBQVEsRUFBRTtRQUM1QixNQUFNO1FBQ04sSUFBSSxFQUFFLHFCQUFxQixZQUFZLENBQUMsS0FBSyxDQUFDLFlBQVk7S0FDM0QsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICcuL2NyZWF0ZS1zZWxlY3Rvcic7XG5pbXBvcnQgeyBlbnN1cmVWYWxpZFNlbGVjdG9yLCBlbnN1cmVWYWx1ZVByb3ZpZGVkIH0gZnJvbSAnLi9zZWxlY3Rvci1jaGVja3MudXRpbCc7XG5pbXBvcnQgeyBUeXBlZFNlbGVjdG9yIH0gZnJvbSAnLi9zZWxlY3Rvci10eXBlcy51dGlsJztcblxuaW50ZXJmYWNlIFNlbGVjdG9yTWFwIHtcbiAgW2tleTogc3RyaW5nXTogVHlwZWRTZWxlY3Rvcjxhbnk+O1xufVxuXG50eXBlIE1vZGVsU2VsZWN0b3I8VCBleHRlbmRzIFNlbGVjdG9yTWFwPiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gTWFwcGVkUmVzdWx0PFQ+O1xuXG50eXBlIE1hcHBlZFJlc3VsdDxUU2VsZWN0b3JNYXA+ID0ge1xuICBbUCBpbiBrZXlvZiBUU2VsZWN0b3JNYXBdOiBUU2VsZWN0b3JNYXBbUF0gZXh0ZW5kcyBUeXBlZFNlbGVjdG9yPGluZmVyIFI+ID8gUiA6IG5ldmVyO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vZGVsU2VsZWN0b3I8VCBleHRlbmRzIFNlbGVjdG9yTWFwPihzZWxlY3Rvck1hcDogVCk6IE1vZGVsU2VsZWN0b3I8VD4ge1xuICBjb25zdCBzZWxlY3RvcktleXMgPSBPYmplY3Qua2V5cyhzZWxlY3Rvck1hcCk7XG4gIGNvbnN0IHNlbGVjdG9ycyA9IE9iamVjdC52YWx1ZXMoc2VsZWN0b3JNYXApO1xuXG4gIGlmICh0eXBlb2YgbmdEZXZNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ0Rldk1vZGUpIHtcbiAgICBlbnN1cmVWYWxpZFNlbGVjdG9yTWFwPFQ+KHtcbiAgICAgIHByZWZpeDogJ1tjcmVhdGVNb2RlbFNlbGVjdG9yXScsXG4gICAgICBzZWxlY3Rvck1hcCxcbiAgICAgIHNlbGVjdG9yS2V5cyxcbiAgICAgIHNlbGVjdG9yc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKHNlbGVjdG9ycywgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gc2VsZWN0b3JLZXlzLnJlZHVjZSgob2JqLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAob2JqIGFzIGFueSlba2V5XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSBhcyBNYXBwZWRSZXN1bHQ8VD4pO1xuICB9KSBhcyBNb2RlbFNlbGVjdG9yPFQ+O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVWYWxpZFNlbGVjdG9yTWFwPFQgZXh0ZW5kcyBTZWxlY3Rvck1hcD4oe1xuICBwcmVmaXgsXG4gIHNlbGVjdG9yTWFwLFxuICBzZWxlY3RvcktleXMsXG4gIHNlbGVjdG9yc1xufToge1xuICBwcmVmaXg6IHN0cmluZztcbiAgc2VsZWN0b3JNYXA6IFQ7XG4gIHNlbGVjdG9yS2V5czogc3RyaW5nW107XG4gIHNlbGVjdG9yczogVHlwZWRTZWxlY3Rvcjxhbnk+W107XG59KSB7XG4gIGVuc3VyZVZhbHVlUHJvdmlkZWQoc2VsZWN0b3JNYXAsIHsgcHJlZml4LCBub3VuOiAnc2VsZWN0b3IgbWFwJyB9KTtcbiAgZW5zdXJlVmFsdWVQcm92aWRlZCh0eXBlb2Ygc2VsZWN0b3JNYXAgPT09ICdvYmplY3QnLCB7IHByZWZpeCwgbm91bjogJ3ZhbGlkIHNlbGVjdG9yIG1hcCcgfSk7XG4gIGVuc3VyZVZhbHVlUHJvdmlkZWQoc2VsZWN0b3JLZXlzLmxlbmd0aCwgeyBwcmVmaXgsIG5vdW46ICdub24tZW1wdHkgc2VsZWN0b3IgbWFwJyB9KTtcbiAgc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yLCBpbmRleCkgPT5cbiAgICBlbnN1cmVWYWxpZFNlbGVjdG9yKHNlbGVjdG9yLCB7XG4gICAgICBwcmVmaXgsXG4gICAgICBub3VuOiBgc2VsZWN0b3IgZm9yIHRoZSAnJHtzZWxlY3RvcktleXNbaW5kZXhdfScgcHJvcGVydHlgXG4gICAgfSlcbiAgKTtcbn1cbiJdfQ==