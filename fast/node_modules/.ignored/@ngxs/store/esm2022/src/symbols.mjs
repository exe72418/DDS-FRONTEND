import { Injectable, InjectionToken, inject } from '@angular/core';
import { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';
import * as i0 from "@angular/core";
const NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;
// The injection token is used to resolve a list of states provided at
// the root level through either `NgxsModule.forRoot` or `provideStore`.
export const ROOT_STATE_TOKEN = new InjectionToken(NG_DEV_MODE ? 'ROOT_STATE_TOKEN' : '');
// The injection token is used to resolve a list of states provided at
// the feature level through either `NgxsModule.forFeature` or `provideStates`.
// The Array<Array> is used to overload the resolved value of the token because
// it is a multi-provider token.
export const FEATURE_STATE_TOKEN = new InjectionToken(NG_DEV_MODE ? 'FEATURE_STATE_TOKEN' : '');
// The injection token is used to resolve to options provided at the root
// level through either `NgxsModule.forRoot` or `provideStore`.
export const NGXS_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'NGXS_OPTIONS' : '');
/**
 * The NGXS config settings.
 */
export class NgxsConfig {
    constructor() {
        this.compatibility = {
            strictContentSecurityPolicy: false
        };
        /**
         * Determines the execution context to perform async operations inside. An implementation can be
         * provided to override the default behaviour where the async operations are run
         * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.
         * These observable behaviours are from:
         *   `store.selectSignal(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`
         * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your
         * application doesn't rely on zone.js running change detection then you can switch to the
         * `NoopNgxsExecutionStrategy` that doesn't interact with zones.
         * (default: null)
         */
        this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;
        /**
         * Defining shared selector options
         */
        this.selectorOptions = {
            injectContainerState: false,
            suppressErrors: false
        };
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsConfig, providedIn: 'root', useFactory: () => {
            const defaultConfig = new NgxsConfig();
            const config = inject(NGXS_OPTIONS);
            return {
                ...defaultConfig,
                ...config,
                selectorOptions: {
                    ...defaultConfig.selectorOptions,
                    ...config.selectorOptions
                }
            };
        } }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: () => {
                        const defaultConfig = new NgxsConfig();
                        const config = inject(NGXS_OPTIONS);
                        return {
                            ...defaultConfig,
                            ...config,
                            selectorOptions: {
                                ...defaultConfig.selectorOptions,
                                ...config.selectorOptions
                            }
                        };
                    }
                }]
        }] });
/**
 * Represents a basic change from a previous to a new value for a single state instance.
 * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.
 */
export class NgxsSimpleChange {
    constructor(previousValue, currentValue, firstChange) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
    }
}
//# sourceMappingURL=data:application/json;base64,