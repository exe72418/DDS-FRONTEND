import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { ɵPlainObjectOf, ɵStateClassInternal, ɵActionHandlerMetaData } from '@ngxs/store/internals';
import { NgxsConfig } from '../symbols';
export type StateKeyGraph = ɵPlainObjectOf<string[]>;
export type StatesByName = ɵPlainObjectOf<ɵStateClassInternal>;
export interface StateOperations<T> {
    getState(): T;
    setState(val: T): void;
    dispatch(actionOrActions: any | any[]): Observable<void>;
}
export interface MappedStore {
    name: string;
    isInitialised: boolean;
    actions: ɵPlainObjectOf<ɵActionHandlerMetaData[]>;
    defaults: any;
    instance: any;
    path: string;
}
export interface StatesAndDefaults {
    defaults: any;
    states: MappedStore[];
}
/**
 * Get a deeply nested value. Example:
 *
 *    getValue({ foo: bar: [] }, 'foo.bar') //=> []
 *
 * @ignore
 *
 * Marked for removal. It's only used within `createSelectorFn`.
 */
export declare function propGetter(paths: string[], config: NgxsConfig): (x: any) => any;
export declare const ɵPROP_GETTER: InjectionToken<(paths: string[]) => (x: any) => any>;
/**
 * Given an array of states, it will return a object graph. Example:
 *    const states = [
 *      Cart,
 *      CartSaved,
 *      CartSavedItems
 *    ]
 *
 * would return:
 *
 *  const graph = {
 *    cart: ['saved'],
 *    saved: ['items'],
 *    items: []
 *  };
 *
 * @ignore
 */
export declare function buildGraph(stateClasses: ɵStateClassInternal[]): StateKeyGraph;
/**
 * Given a states array, returns object graph
 * returning the name and state metadata. Example:
 *
 *  const graph = {
 *    cart: { metadata }
 *  };
 *
 * @ignore
 */
export declare function nameToState(states: ɵStateClassInternal[]): ɵPlainObjectOf<ɵStateClassInternal>;
/**
 * Given a object relationship graph will return the full path
 * for the child items. Example:
 *
 *  const graph = {
 *    cart: ['saved'],
 *    saved: ['items'],
 *    items: []
 *  };
 *
 * would return:
 *
 *  const r = {
 *    cart: 'cart',
 *    saved: 'cart.saved',
 *    items: 'cart.saved.items'
 *  };
 *
 * @ignore
 */
export declare function findFullParentPath(obj: StateKeyGraph, newObj?: ɵPlainObjectOf<string>): ɵPlainObjectOf<string>;
/**
 * Given a object graph, it will return the items topologically sorted Example:
 *
 *  const graph = {
 *    cart: ['saved'],
 *    saved: ['items'],
 *    items: []
 *  };
 *
 * would return:
 *
 *  const results = [
 *    'items',
 *    'saved',
 *    'cart'
 *  ];
 *
 * @ignore
 */
export declare function topologicalSort(graph: StateKeyGraph): string[];
