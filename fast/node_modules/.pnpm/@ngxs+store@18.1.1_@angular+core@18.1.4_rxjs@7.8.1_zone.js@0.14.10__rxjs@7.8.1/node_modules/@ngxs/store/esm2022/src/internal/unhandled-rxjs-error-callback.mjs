import { config } from 'rxjs';
const ɵɵunhandledRxjsErrorCallbacks = new WeakMap();
const existingHandler = config.onUnhandledError;
config.onUnhandledError = function (error) {
    const unhandledErrorCallback = ɵɵunhandledRxjsErrorCallbacks.get(error);
    if (unhandledErrorCallback) {
        unhandledErrorCallback();
    }
    else if (existingHandler) {
        existingHandler.call(this, error);
    }
    else {
        throw error;
    }
};
export function executeUnhandledCallback(error) {
    const unhandledErrorCallback = ɵɵunhandledRxjsErrorCallbacks.get(error);
    if (unhandledErrorCallback) {
        unhandledErrorCallback();
        return true;
    }
    return false;
}
export function assignUnhandledCallback(error, callback) {
    // Since the error can be essentially anything, we must ensure that we only
    // handle objects, as weak maps do not allow any other key type besides objects.
    // The error can also be a string if thrown in the following manner: `throwError('My Error')`.
    if (error !== null && typeof error === 'object') {
        let hasBeenCalled = false;
        ɵɵunhandledRxjsErrorCallbacks.set(error, () => {
            if (!hasBeenCalled) {
                hasBeenCalled = true;
                callback();
            }
        });
    }
    return error;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5oYW5kbGVkLXJ4anMtZXJyb3ItY2FsbGJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9zcmMvaW50ZXJuYWwvdW5oYW5kbGVkLXJ4anMtZXJyb3ItY2FsbGJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QixNQUFNLDZCQUE2QixHQUFHLElBQUksT0FBTyxFQUFxQixDQUFDO0FBRXZFLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRCxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxLQUFVO0lBQzVDLE1BQU0sc0JBQXNCLEdBQUcsNkJBQTZCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hFLElBQUksc0JBQXNCLEVBQUUsQ0FBQztRQUMzQixzQkFBc0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7U0FBTSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQzNCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLHdCQUF3QixDQUFDLEtBQVU7SUFDakQsTUFBTSxzQkFBc0IsR0FBRyw2QkFBNkIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEUsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO1FBQzNCLHNCQUFzQixFQUFFLENBQUM7UUFDekIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLEtBQVUsRUFBRSxRQUFzQjtJQUN4RSwyRUFBMkU7SUFDM0UsZ0ZBQWdGO0lBQ2hGLDhGQUE4RjtJQUM5RixJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDaEQsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzFCLDZCQUE2QixDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQzVDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDbkIsYUFBYSxHQUFHLElBQUksQ0FBQztnQkFDckIsUUFBUSxFQUFFLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IMm1ybV1bmhhbmRsZWRSeGpzRXJyb3JDYWxsYmFja3MgPSBuZXcgV2Vha01hcDxhbnksIFZvaWRGdW5jdGlvbj4oKTtcblxuY29uc3QgZXhpc3RpbmdIYW5kbGVyID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG5jb25maWcub25VbmhhbmRsZWRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcjogYW55KSB7XG4gIGNvbnN0IHVuaGFuZGxlZEVycm9yQ2FsbGJhY2sgPSDJtcm1dW5oYW5kbGVkUnhqc0Vycm9yQ2FsbGJhY2tzLmdldChlcnJvcik7XG4gIGlmICh1bmhhbmRsZWRFcnJvckNhbGxiYWNrKSB7XG4gICAgdW5oYW5kbGVkRXJyb3JDYWxsYmFjaygpO1xuICB9IGVsc2UgaWYgKGV4aXN0aW5nSGFuZGxlcikge1xuICAgIGV4aXN0aW5nSGFuZGxlci5jYWxsKHRoaXMsIGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVVbmhhbmRsZWRDYWxsYmFjayhlcnJvcjogYW55KSB7XG4gIGNvbnN0IHVuaGFuZGxlZEVycm9yQ2FsbGJhY2sgPSDJtcm1dW5oYW5kbGVkUnhqc0Vycm9yQ2FsbGJhY2tzLmdldChlcnJvcik7XG4gIGlmICh1bmhhbmRsZWRFcnJvckNhbGxiYWNrKSB7XG4gICAgdW5oYW5kbGVkRXJyb3JDYWxsYmFjaygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnblVuaGFuZGxlZENhbGxiYWNrKGVycm9yOiBhbnksIGNhbGxiYWNrOiBWb2lkRnVuY3Rpb24pIHtcbiAgLy8gU2luY2UgdGhlIGVycm9yIGNhbiBiZSBlc3NlbnRpYWxseSBhbnl0aGluZywgd2UgbXVzdCBlbnN1cmUgdGhhdCB3ZSBvbmx5XG4gIC8vIGhhbmRsZSBvYmplY3RzLCBhcyB3ZWFrIG1hcHMgZG8gbm90IGFsbG93IGFueSBvdGhlciBrZXkgdHlwZSBiZXNpZGVzIG9iamVjdHMuXG4gIC8vIFRoZSBlcnJvciBjYW4gYWxzbyBiZSBhIHN0cmluZyBpZiB0aHJvd24gaW4gdGhlIGZvbGxvd2luZyBtYW5uZXI6IGB0aHJvd0Vycm9yKCdNeSBFcnJvcicpYC5cbiAgaWYgKGVycm9yICE9PSBudWxsICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcpIHtcbiAgICBsZXQgaGFzQmVlbkNhbGxlZCA9IGZhbHNlO1xuICAgIMm1ybV1bmhhbmRsZWRSeGpzRXJyb3JDYWxsYmFja3Muc2V0KGVycm9yLCAoKSA9PiB7XG4gICAgICBpZiAoIWhhc0JlZW5DYWxsZWQpIHtcbiAgICAgICAgaGFzQmVlbkNhbGxlZCA9IHRydWU7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuIl19