import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
function createRootElement() {
    const document = TestBed.inject(DOCUMENT);
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
function removeRootElement() {
    const root = document.getElementsByTagName('app-root').item(0);
    try {
        document.body.removeChild(root);
    }
    catch { }
}
function destroyPlatformBeforeBootstrappingTheNewOne(freshUrl) {
    destroyPlatform();
    resetLocationToUrl(freshUrl);
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
function resetLocationToUrl(freshUrl) {
    window.history.replaceState({}, 'Test', freshUrl);
}
export function freshPlatform(fn) {
    let resolve = null;
    let reject = null;
    let whenDoneIsCalledPromise = null;
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
    }
    return async function testWithAFreshPlatform() {
        try {
            const freshUrl = '/';
            destroyPlatformBeforeBootstrappingTheNewOne(freshUrl);
            if (hasDoneArgument) {
                await fn((error) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
                await whenDoneIsCalledPromise;
            }
            else {
                await fn();
            }
        }
        finally {
            resetPlatformAfterBootstrapping();
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy9zcmMvZnJlc2gtcGxhdGZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxTQUFTLGlCQUFpQjtJQUN4QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDMUQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUVELFNBQVMsaUJBQWlCO0lBQ3hCLE1BQU0sSUFBSSxHQUFZLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUM7SUFDekUsSUFBSSxDQUFDO1FBQ0gsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUM7QUFDWixDQUFDO0FBRUQsU0FBUywyQ0FBMkMsQ0FBQyxRQUFnQjtJQUNuRSxlQUFlLEVBQUUsQ0FBQztJQUNsQixrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixpQkFBaUIsRUFBRSxDQUFDO0FBQ3RCLENBQUM7QUFFRCx5REFBeUQ7QUFDekQsbURBQW1EO0FBQ25ELG1CQUFtQjtBQUNuQixTQUFTLCtCQUErQjtJQUN0QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUMvQixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDakIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxRQUFnQjtJQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQTBDO0lBQ3RFLElBQUksT0FBTyxHQUF3QixJQUFJLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQW9DLElBQUksQ0FBQztJQUNuRCxJQUFJLHVCQUF1QixHQUF5QixJQUFJLENBQUM7SUFFekQsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFFeEMsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUNwQix1QkFBdUIsR0FBRyxJQUFJLE9BQU8sQ0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNoRSxPQUFPLEdBQUcsUUFBUSxDQUFDO1lBQ25CLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxLQUFLLFVBQVUsc0JBQXNCO1FBQzFDLElBQUksQ0FBQztZQUNILE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztZQUNyQiwyQ0FBMkMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV0RCxJQUFJLGVBQWUsRUFBRSxDQUFDO2dCQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFO29CQUN6QixJQUFJLEtBQUssRUFBRSxDQUFDO3dCQUNWLE1BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDakIsQ0FBQzt5QkFBTSxDQUFDO3dCQUNOLE9BQVEsRUFBRSxDQUFDO29CQUNiLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTSx1QkFBd0IsQ0FBQztZQUNqQyxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxFQUFFLEVBQUUsQ0FBQztZQUNiLENBQUM7UUFDSCxDQUFDO2dCQUFTLENBQUM7WUFDVCwrQkFBK0IsRUFBRSxDQUFDO1FBQ3BDLENBQUM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IFZFUlNJT04sIGRlc3Ryb3lQbGF0Zm9ybSwgY3JlYXRlUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZnVuY3Rpb24gY3JlYXRlUm9vdEVsZW1lbnQoKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gVGVzdEJlZC5pbmplY3QoRE9DVU1FTlQpO1xuICBjb25zdCByb290ID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnYXBwLXJvb3QnLCBkb2N1bWVudCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocm9vdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJvb3RFbGVtZW50KCkge1xuICBjb25zdCByb290OiBFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FwcC1yb290JykuaXRlbSgwKSE7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChyb290KTtcbiAgfSBjYXRjaCB7fVxufVxuXG5mdW5jdGlvbiBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKGZyZXNoVXJsOiBzdHJpbmcpIHtcbiAgZGVzdHJveVBsYXRmb3JtKCk7XG4gIHJlc2V0TG9jYXRpb25Ub1VybChmcmVzaFVybCk7XG4gIGNyZWF0ZVJvb3RFbGVtZW50KCk7XG59XG5cbi8vIEFzIHdlIGNyZWF0ZSBvdXIgY3VzdG9tIHBsYXRmb3JtIHZpYSBgYm9vdHN0cmFwTW9kdWxlYFxuLy8gd2UgaGF2ZSB0byBkZXN0cm95IGl0IGFmdGVyIGFzc2V0aW9ucyBhbmQgcmV2ZXJ0XG4vLyB0aGUgcHJldmlvdXMgb25lXG5mdW5jdGlvbiByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCkge1xuICByZW1vdmVSb290RWxlbWVudCgpO1xuICBkZXN0cm95UGxhdGZvcm0oKTtcbiAgY29uc3QgdmVyc2lvbiA9ICtWRVJTSU9OLm1ham9yO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2NvbW1pdC9lMjUwZGI0ZjI2MTc0MWIwNGVlNGNiYWQ0ZGVjNDFhODkwOGExMmFhXG4gIGlmICh2ZXJzaW9uIDwgMTQpIHtcbiAgICBjcmVhdGVQbGF0Zm9ybShUZXN0QmVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldExvY2F0aW9uVG9VcmwoZnJlc2hVcmw6IHN0cmluZykge1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICdUZXN0JywgZnJlc2hVcmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJlc2hQbGF0Zm9ybShmbjogKGRvbmU/OiBWb2lkRnVuY3Rpb24pID0+IFByb21pc2U8dm9pZD4pIHtcbiAgbGV0IHJlc29sdmU6IFZvaWRGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xuICBsZXQgcmVqZWN0OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgbGV0IHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3QgaGFzRG9uZUFyZ3VtZW50ID0gZm4ubGVuZ3RoID09PSAxO1xuXG4gIGlmIChoYXNEb25lQXJndW1lbnQpIHtcbiAgICB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiB0ZXN0V2l0aEFGcmVzaFBsYXRmb3JtKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmcmVzaFVybCA9ICcvJztcbiAgICAgIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoZnJlc2hVcmwpO1xuXG4gICAgICBpZiAoaGFzRG9uZUFyZ3VtZW50KSB7XG4gICAgICAgIGF3YWl0IGZuKChlcnJvcj86IEVycm9yKSA9PiB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QhKGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSEoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCk7XG4gICAgfVxuICB9O1xufVxuIl19