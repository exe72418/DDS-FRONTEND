import { inject, ExperimentalPendingTasks } from '@angular/core';
import { Actions, withNgxsPreboot } from '@ngxs/store';
/**
 * This is an experimental feature that contributes to app stability,
 * which is required during server-side rendering. With asynchronous
 * actions being dispatched and handled, Angular is unaware of them in
 * zoneless mode and doesn't know whether the app is still unstable.
 * This may prematurely serialize the final HTML that is sent to the client.
 */
export function withExperimentalNgxsPendingTasks() {
    return withNgxsPreboot(() => {
        const pendingTasks = inject(ExperimentalPendingTasks);
        const actions$ = inject(Actions);
        const actionToRemoveTaskFnMap = new Map();
        actions$.subscribe(ctx => {
            if (ctx.status === "DISPATCHED" /* ActionStatus.Dispatched */) {
                const removeTaskFn = pendingTasks.add();
                actionToRemoveTaskFnMap.set(ctx.action, removeTaskFn);
            }
            else {
                const removeTaskFn = actionToRemoveTaskFnMap.get(ctx.action);
                if (typeof removeTaskFn === 'function') {
                    removeTaskFn();
                    actionToRemoveTaskFnMap.delete(ctx.action);
                }
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZy10YXNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JlL2V4cGVyaW1lbnRhbC9zcmMvcGVuZGluZy10YXNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBZ0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVyRTs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsZ0NBQWdDO0lBQzlDLE9BQU8sZUFBZSxDQUFDLEdBQUcsRUFBRTtRQUMxQixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0RCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUUzRCxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksR0FBRyxDQUFDLE1BQU0sK0NBQTRCLEVBQUUsQ0FBQztnQkFDM0MsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUN4Qyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN4RCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxZQUFZLEdBQUcsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxPQUFPLFlBQVksS0FBSyxVQUFVLEVBQUUsQ0FBQztvQkFDdkMsWUFBWSxFQUFFLENBQUM7b0JBQ2YsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDN0MsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgRXhwZXJpbWVudGFsUGVuZGluZ1Rhc2tzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25TdGF0dXMsIEFjdGlvbnMsIHdpdGhOZ3hzUHJlYm9vdCB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgY29udHJpYnV0ZXMgdG8gYXBwIHN0YWJpbGl0eSxcbiAqIHdoaWNoIGlzIHJlcXVpcmVkIGR1cmluZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFdpdGggYXN5bmNocm9ub3VzXG4gKiBhY3Rpb25zIGJlaW5nIGRpc3BhdGNoZWQgYW5kIGhhbmRsZWQsIEFuZ3VsYXIgaXMgdW5hd2FyZSBvZiB0aGVtIGluXG4gKiB6b25lbGVzcyBtb2RlIGFuZCBkb2Vzbid0IGtub3cgd2hldGhlciB0aGUgYXBwIGlzIHN0aWxsIHVuc3RhYmxlLlxuICogVGhpcyBtYXkgcHJlbWF0dXJlbHkgc2VyaWFsaXplIHRoZSBmaW5hbCBIVE1MIHRoYXQgaXMgc2VudCB0byB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aEV4cGVyaW1lbnRhbE5neHNQZW5kaW5nVGFza3MoKSB7XG4gIHJldHVybiB3aXRoTmd4c1ByZWJvb3QoKCkgPT4ge1xuICAgIGNvbnN0IHBlbmRpbmdUYXNrcyA9IGluamVjdChFeHBlcmltZW50YWxQZW5kaW5nVGFza3MpO1xuICAgIGNvbnN0IGFjdGlvbnMkID0gaW5qZWN0KEFjdGlvbnMpO1xuXG4gICAgY29uc3QgYWN0aW9uVG9SZW1vdmVUYXNrRm5NYXAgPSBuZXcgTWFwPGFueSwgKCkgPT4gdm9pZD4oKTtcblxuICAgIGFjdGlvbnMkLnN1YnNjcmliZShjdHggPT4ge1xuICAgICAgaWYgKGN0eC5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5EaXNwYXRjaGVkKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZVRhc2tGbiA9IHBlbmRpbmdUYXNrcy5hZGQoKTtcbiAgICAgICAgYWN0aW9uVG9SZW1vdmVUYXNrRm5NYXAuc2V0KGN0eC5hY3Rpb24sIHJlbW92ZVRhc2tGbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZW1vdmVUYXNrRm4gPSBhY3Rpb25Ub1JlbW92ZVRhc2tGbk1hcC5nZXQoY3R4LmFjdGlvbik7XG4gICAgICAgIGlmICh0eXBlb2YgcmVtb3ZlVGFza0ZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmVtb3ZlVGFza0ZuKCk7XG4gICAgICAgICAgYWN0aW9uVG9SZW1vdmVUYXNrRm5NYXAuZGVsZXRlKGN0eC5hY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuIl19