// This key is used to store metadata on state classes,
// such as actions and other related information.
export const ɵMETA_KEY = 'NGXS_META';
// This key is used to store options on state classes
// provided through the `@State` decorator.
export const ɵMETA_OPTIONS_KEY = 'NGXS_OPTIONS_META';
// This key is used to store selector metadata on selector functions,
// such as decorated with the `@Selector` or provided through the
// `createSelector` function.
export const ɵSELECTOR_META_KEY = 'NGXS_SELECTOR_META';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JlL2ludGVybmFscy9zcmMvc3ltYm9scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSx1REFBdUQ7QUFDdkQsaURBQWlEO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFDckMscURBQXFEO0FBQ3JELDJDQUEyQztBQUMzQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztBQUNyRCxxRUFBcUU7QUFDckUsaUVBQWlFO0FBQ2pFLDZCQUE2QjtBQUM3QixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU3RhdGVUb2tlbiB9IGZyb20gJy4vc3RhdGUtdG9rZW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIMm1UGxhaW5PYmplY3Qge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgybVQbGFpbk9iamVjdE9mPFQ+IHtcbiAgW2tleTogc3RyaW5nXTogVDtcbn1cblxuZXhwb3J0IHR5cGUgybVTdGF0ZUNsYXNzPFQgPSBhbnk+ID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVDtcblxuLy8gVGhpcyBrZXkgaXMgdXNlZCB0byBzdG9yZSBtZXRhZGF0YSBvbiBzdGF0ZSBjbGFzc2VzLFxuLy8gc3VjaCBhcyBhY3Rpb25zIGFuZCBvdGhlciByZWxhdGVkIGluZm9ybWF0aW9uLlxuZXhwb3J0IGNvbnN0IMm1TUVUQV9LRVkgPSAnTkdYU19NRVRBJztcbi8vIFRoaXMga2V5IGlzIHVzZWQgdG8gc3RvcmUgb3B0aW9ucyBvbiBzdGF0ZSBjbGFzc2VzXG4vLyBwcm92aWRlZCB0aHJvdWdoIHRoZSBgQFN0YXRlYCBkZWNvcmF0b3IuXG5leHBvcnQgY29uc3QgybVNRVRBX09QVElPTlNfS0VZID0gJ05HWFNfT1BUSU9OU19NRVRBJztcbi8vIFRoaXMga2V5IGlzIHVzZWQgdG8gc3RvcmUgc2VsZWN0b3IgbWV0YWRhdGEgb24gc2VsZWN0b3IgZnVuY3Rpb25zLFxuLy8gc3VjaCBhcyBkZWNvcmF0ZWQgd2l0aCB0aGUgYEBTZWxlY3RvcmAgb3IgcHJvdmlkZWQgdGhyb3VnaCB0aGVcbi8vIGBjcmVhdGVTZWxlY3RvcmAgZnVuY3Rpb24uXG5leHBvcnQgY29uc3QgybVTRUxFQ1RPUl9NRVRBX0tFWSA9ICdOR1hTX1NFTEVDVE9SX01FVEEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIMm1U3RhdGVUb2tlbjxULCBVPiB7XG4gIG5ldyAobmFtZTogybVUb2tlbk5hbWU8VD4pOiBVO1xuICBnZXROYW1lKCk6IHN0cmluZztcbiAgdG9TdHJpbmcoKTogc3RyaW5nO1xufVxuXG50eXBlIFJlcXVpcmVHZW5lcmljPFQsIFU+ID0gVCBleHRlbmRzIHZvaWQgPyAnWW91IG11c3QgcHJvdmlkZSBhIHR5cGUgcGFyYW1ldGVyJyA6IFU7XG5cbmV4cG9ydCB0eXBlIMm1VG9rZW5OYW1lPFQ+ID0gc3RyaW5nICYgUmVxdWlyZUdlbmVyaWM8VCwgc3RyaW5nPjtcblxuZXhwb3J0IHR5cGUgybVFeHRyYWN0VG9rZW5UeXBlPFA+ID0gUCBleHRlbmRzIFN0YXRlVG9rZW48aW5mZXIgVD4gPyBUIDogbmV2ZXI7XG5cbi8qKlxuICogT3B0aW9ucyB0aGF0IGNhbiBiZSBwcm92aWRlZCB0byB0aGUgc3RvcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgybVTdG9yZU9wdGlvbnM8VD4ge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgc3RhdGUuIFJlcXVpcmVkLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nIHwgU3RhdGVUb2tlbjxUPjtcblxuICAvKipcbiAgICogRGVmYXVsdCB2YWx1ZXMgZm9yIHRoZSBzdGF0ZS4gSWYgbm90IHByb3ZpZGVkLCB1c2VzIGVtcHR5IG9iamVjdC5cbiAgICovXG4gIGRlZmF1bHRzPzogVDtcblxuICAvKipcbiAgICogU3ViIHN0YXRlcyBmb3IgdGhlIGdpdmVuIHN0YXRlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBSZWFkIHRoZSBkZXByZWNhdGlvbiBub3RpY2UgYXQgdGhpcyBsaW5rOiBodHRwczovL25neHMuaW8vZGVwcmVjYXRpb25zL3N1Yi1zdGF0ZXMtZGVwcmVjYXRpb24uXG4gICAqL1xuICBjaGlsZHJlbj86IMm1U3RhdGVDbGFzc1tdO1xufVxuXG4vLyBpbnNwaXJlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MzY3NDM4OVxuZXhwb3J0IGludGVyZmFjZSDJtVN0YXRlQ2xhc3NJbnRlcm5hbDxUID0gYW55LCBVID0gYW55PiBleHRlbmRzIMm1U3RhdGVDbGFzczxUPiB7XG4gIFvJtU1FVEFfS0VZXT86IMm1TWV0YURhdGFNb2RlbDtcbiAgW8m1TUVUQV9PUFRJT05TX0tFWV0/OiDJtVN0b3JlT3B0aW9uczxVPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSDJtU1ldGFEYXRhTW9kZWwge1xuICBuYW1lOiBzdHJpbmcgfCBudWxsO1xuICBhY3Rpb25zOiDJtVBsYWluT2JqZWN0T2Y8ybVBY3Rpb25IYW5kbGVyTWV0YURhdGFbXT47XG4gIGRlZmF1bHRzOiBhbnk7XG4gIHBhdGg6IHN0cmluZyB8IG51bGw7XG4gIG1ha2VSb290U2VsZWN0b3I6IMm1U2VsZWN0b3JGYWN0b3J5IHwgbnVsbDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGNoaWxkcmVuPzogybVTdGF0ZUNsYXNzSW50ZXJuYWxbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSDJtVNlbGVjdG9yTWV0YURhdGFNb2RlbCB7XG4gIG1ha2VSb290U2VsZWN0b3I6IMm1U2VsZWN0b3JGYWN0b3J5IHwgbnVsbDtcbiAgb3JpZ2luYWxGbjogRnVuY3Rpb24gfCBudWxsO1xuICBjb250YWluZXJDbGFzczogYW55O1xuICBzZWxlY3Rvck5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGdldFNlbGVjdG9yT3B0aW9uczogKCkgPT4gybVTaGFyZWRTZWxlY3Rvck9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgybVTaGFyZWRTZWxlY3Rvck9wdGlvbnMge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogUmVhZCB0aGUgZGVwcmVjYXRpb24gbm90aWNlIGF0IHRoaXMgbGluazogaHR0cHM6Ly9uZ3hzLmlvL2RlcHJlY2F0aW9ucy9pbmplY3QtY29udGFpbmVyLXN0YXRlLWRlcHJlY2F0aW9uLm1kLlxuICAgKi9cbiAgaW5qZWN0Q29udGFpbmVyU3RhdGU/OiBib29sZWFuO1xuICBzdXBwcmVzc0Vycm9ycz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgybVSdW50aW1lU2VsZWN0b3JDb250ZXh0IHtcbiAgZ2V0U3RhdGVHZXR0ZXIoa2V5OiBhbnkpOiAoc3RhdGU6IGFueSkgPT4gYW55O1xuICBnZXRTZWxlY3Rvck9wdGlvbnMobG9jYWxPcHRpb25zPzogybVTaGFyZWRTZWxlY3Rvck9wdGlvbnMpOiDJtVNoYXJlZFNlbGVjdG9yT3B0aW9ucztcbn1cblxuZXhwb3J0IHR5cGUgybVTZWxlY3RGcm9tUm9vdFN0YXRlID0gKHJvb3RTdGF0ZTogYW55KSA9PiBhbnk7XG5leHBvcnQgdHlwZSDJtVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgcnVudGltZUNvbnRleHQ6IMm1UnVudGltZVNlbGVjdG9yQ29udGV4dFxuKSA9PiDJtVNlbGVjdEZyb21Sb290U3RhdGU7XG5cbi8qKlxuICogQWN0aW9ucyB0aGF0IGNhbiBiZSBwcm92aWRlZCBpbiBhIGFjdGlvbiBkZWNvcmF0b3IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgybVBY3Rpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIENhbmNlbCB0aGUgcHJldmlvdXMgdW5jb21wbGV0ZWQgb2JzZXJ2YWJsZShzKS5cbiAgICovXG4gIGNhbmNlbFVuY29tcGxldGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSDJtUFjdGlvbkhhbmRsZXJNZXRhRGF0YSB7XG4gIGZuOiBzdHJpbmcgfCBzeW1ib2w7XG4gIG9wdGlvbnM6IMm1QWN0aW9uT3B0aW9ucztcbiAgdHlwZTogc3RyaW5nO1xufVxuIl19