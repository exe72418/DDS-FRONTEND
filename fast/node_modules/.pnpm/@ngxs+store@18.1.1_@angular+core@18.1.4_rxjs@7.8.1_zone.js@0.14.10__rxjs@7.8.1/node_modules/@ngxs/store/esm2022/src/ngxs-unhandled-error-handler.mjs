import { ErrorHandler, Injectable, NgZone, inject } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxsUnhandledErrorHandler {
    constructor() {
        this._ngZone = inject(NgZone);
        this._errorHandler = inject(ErrorHandler);
    }
    /**
     * The `_unhandledErrorContext` is left unused internally since we do not
     * require it for internal operations. However, developers who wish to provide
     * their own custom error handler may utilize this context information.
     */
    handleError(error, _unhandledErrorContext) {
        // In order to avoid duplicate error handling, it is necessary to leave
        // the Angular zone to ensure that errors are not caught twice. The `handleError`
        // method may contain a `throw error` statement, which is used to re-throw the error.
        // If the error is re-thrown within the Angular zone, it will be caught again by the
        // Angular zone. By default, `@angular/core` leaves the Angular zone when invoking
        // `handleError` (see `_callAndReportToErrorHandler`).
        this._ngZone.runOutsideAngular(() => this._errorHandler.handleError(error));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsUnhandledErrorHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsUnhandledErrorHandler, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: NgxsUnhandledErrorHandler, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy11bmhhbmRsZWQtZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JlL3NyYy9uZ3hzLXVuaGFuZGxlZC1lcnJvci1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBT3pFLE1BQU0sT0FBTyx5QkFBeUI7SUFEdEM7UUFFVSxZQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLGtCQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBZ0I5QztJQWRDOzs7O09BSUc7SUFDSCxXQUFXLENBQUMsS0FBVSxFQUFFLHNCQUFpRDtRQUN2RSx1RUFBdUU7UUFDdkUsaUZBQWlGO1FBQ2pGLHFGQUFxRjtRQUNyRixvRkFBb0Y7UUFDcEYsa0ZBQWtGO1FBQ2xGLHNEQUFzRDtRQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztpSUFqQlUseUJBQXlCO3FJQUF6Qix5QkFBeUIsY0FEWixNQUFNOzsyRkFDbkIseUJBQXlCO2tCQURyQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciwgSW5qZWN0YWJsZSwgTmdab25lLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBOZ3hzVW5oYW5kbGVkRXJyb3JDb250ZXh0IHtcbiAgYWN0aW9uOiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmd4c1VuaGFuZGxlZEVycm9ySGFuZGxlciB7XG4gIHByaXZhdGUgX25nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xuICBwcml2YXRlIF9lcnJvckhhbmRsZXIgPSBpbmplY3QoRXJyb3JIYW5kbGVyKTtcblxuICAvKipcbiAgICogVGhlIGBfdW5oYW5kbGVkRXJyb3JDb250ZXh0YCBpcyBsZWZ0IHVudXNlZCBpbnRlcm5hbGx5IHNpbmNlIHdlIGRvIG5vdFxuICAgKiByZXF1aXJlIGl0IGZvciBpbnRlcm5hbCBvcGVyYXRpb25zLiBIb3dldmVyLCBkZXZlbG9wZXJzIHdobyB3aXNoIHRvIHByb3ZpZGVcbiAgICogdGhlaXIgb3duIGN1c3RvbSBlcnJvciBoYW5kbGVyIG1heSB1dGlsaXplIHRoaXMgY29udGV4dCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGhhbmRsZUVycm9yKGVycm9yOiBhbnksIF91bmhhbmRsZWRFcnJvckNvbnRleHQ6IE5neHNVbmhhbmRsZWRFcnJvckNvbnRleHQpOiB2b2lkIHtcbiAgICAvLyBJbiBvcmRlciB0byBhdm9pZCBkdXBsaWNhdGUgZXJyb3IgaGFuZGxpbmcsIGl0IGlzIG5lY2Vzc2FyeSB0byBsZWF2ZVxuICAgIC8vIHRoZSBBbmd1bGFyIHpvbmUgdG8gZW5zdXJlIHRoYXQgZXJyb3JzIGFyZSBub3QgY2F1Z2h0IHR3aWNlLiBUaGUgYGhhbmRsZUVycm9yYFxuICAgIC8vIG1ldGhvZCBtYXkgY29udGFpbiBhIGB0aHJvdyBlcnJvcmAgc3RhdGVtZW50LCB3aGljaCBpcyB1c2VkIHRvIHJlLXRocm93IHRoZSBlcnJvci5cbiAgICAvLyBJZiB0aGUgZXJyb3IgaXMgcmUtdGhyb3duIHdpdGhpbiB0aGUgQW5ndWxhciB6b25lLCBpdCB3aWxsIGJlIGNhdWdodCBhZ2FpbiBieSB0aGVcbiAgICAvLyBBbmd1bGFyIHpvbmUuIEJ5IGRlZmF1bHQsIGBAYW5ndWxhci9jb3JlYCBsZWF2ZXMgdGhlIEFuZ3VsYXIgem9uZSB3aGVuIGludm9raW5nXG4gICAgLy8gYGhhbmRsZUVycm9yYCAoc2VlIGBfY2FsbEFuZFJlcG9ydFRvRXJyb3JIYW5kbGVyYCkuXG4gICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuX2Vycm9ySGFuZGxlci5oYW5kbGVFcnJvcihlcnJvcikpO1xuICB9XG59XG4iXX0=