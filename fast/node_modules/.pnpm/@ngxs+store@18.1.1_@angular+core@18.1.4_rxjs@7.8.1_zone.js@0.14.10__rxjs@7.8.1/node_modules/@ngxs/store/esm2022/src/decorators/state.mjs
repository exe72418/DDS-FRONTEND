import { ɵMETA_KEY, ɵMETA_OPTIONS_KEY, ɵensureStoreMetadata } from '@ngxs/store/internals';
import { ensureStateNameIsValid } from '../utils/store-validators';
/**
 * Decorates a class with ngxs state information.
 */
export function State(options) {
    return (target) => {
        const stateClass = target;
        const meta = ɵensureStoreMetadata(stateClass);
        const inheritedStateClass = Object.getPrototypeOf(stateClass);
        const optionsWithInheritance = getStateOptions(inheritedStateClass, options);
        mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });
        stateClass[ɵMETA_OPTIONS_KEY] = optionsWithInheritance;
    };
}
function getStateOptions(inheritedStateClass, options) {
    const inheritanceOptions = inheritedStateClass[ɵMETA_OPTIONS_KEY] || {};
    return { ...inheritanceOptions, ...options };
}
function mutateMetaData(params) {
    const { meta, inheritedStateClass, optionsWithInheritance } = params;
    const { children, defaults, name } = optionsWithInheritance;
    const stateName = typeof name === 'string' ? name : (name && name.getName()) || null;
    if (typeof ngDevMode !== 'undefined' && ngDevMode) {
        ensureStateNameIsValid(stateName);
    }
    if (inheritedStateClass.hasOwnProperty(ɵMETA_KEY)) {
        const inheritedMeta = inheritedStateClass[ɵMETA_KEY] || {};
        meta.actions = { ...meta.actions, ...inheritedMeta.actions };
    }
    meta.children = children;
    meta.defaults = defaults;
    meta.name = stateName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9zcmMvZGVjb3JhdG9ycy9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULGlCQUFpQixFQUlqQixvQkFBb0IsRUFDckIsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQVFuRTs7R0FFRztBQUNILE1BQU0sVUFBVSxLQUFLLENBQUksT0FBeUI7SUFDaEQsT0FBTyxDQUFDLE1BQW1CLEVBQVEsRUFBRTtRQUNuQyxNQUFNLFVBQVUsR0FBd0IsTUFBTSxDQUFDO1FBQy9DLE1BQU0sSUFBSSxHQUFtQixvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxNQUFNLG1CQUFtQixHQUF3QixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sc0JBQXNCLEdBQXFCLGVBQWUsQ0FDOUQsbUJBQW1CLEVBQ25CLE9BQU8sQ0FDUixDQUFDO1FBQ0YsY0FBYyxDQUFJLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztRQUN6RSxVQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxzQkFBc0IsQ0FBQztJQUN6RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQ3RCLG1CQUF3QyxFQUN4QyxPQUF5QjtJQUV6QixNQUFNLGtCQUFrQixHQUN0QixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQyxPQUFPLEVBQUUsR0FBRyxrQkFBa0IsRUFBRSxHQUFHLE9BQU8sRUFBc0IsQ0FBQztBQUNuRSxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUksTUFBNEI7SUFDckQsTUFBTSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUNyRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxzQkFBc0IsQ0FBQztJQUM1RCxNQUFNLFNBQVMsR0FDYixPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDO0lBRXJFLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ2xELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQ2xELE1BQU0sYUFBYSxHQUE0QixtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7QUFDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIMm1U3RhdGVDbGFzcyxcbiAgybVNRVRBX0tFWSxcbiAgybVNRVRBX09QVElPTlNfS0VZLFxuICDJtU1ldGFEYXRhTW9kZWwsXG4gIMm1U3RhdGVDbGFzc0ludGVybmFsLFxuICDJtVN0b3JlT3B0aW9ucyxcbiAgybVlbnN1cmVTdG9yZU1ldGFkYXRhXG59IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XG5cbmltcG9ydCB7IGVuc3VyZVN0YXRlTmFtZUlzVmFsaWQgfSBmcm9tICcuLi91dGlscy9zdG9yZS12YWxpZGF0b3JzJztcblxuaW50ZXJmYWNlIE11dGF0ZU1ldGFPcHRpb25zPFQ+IHtcbiAgbWV0YTogybVNZXRhRGF0YU1vZGVsO1xuICBpbmhlcml0ZWRTdGF0ZUNsYXNzOiDJtVN0YXRlQ2xhc3NJbnRlcm5hbDtcbiAgb3B0aW9uc1dpdGhJbmhlcml0YW5jZTogybVTdG9yZU9wdGlvbnM8VD47XG59XG5cbi8qKlxuICogRGVjb3JhdGVzIGEgY2xhc3Mgd2l0aCBuZ3hzIHN0YXRlIGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gU3RhdGU8VD4ob3B0aW9uczogybVTdG9yZU9wdGlvbnM8VD4pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IMm1U3RhdGVDbGFzcyk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHN0YXRlQ2xhc3M6IMm1U3RhdGVDbGFzc0ludGVybmFsID0gdGFyZ2V0O1xuICAgIGNvbnN0IG1ldGE6IMm1TWV0YURhdGFNb2RlbCA9IMm1ZW5zdXJlU3RvcmVNZXRhZGF0YShzdGF0ZUNsYXNzKTtcbiAgICBjb25zdCBpbmhlcml0ZWRTdGF0ZUNsYXNzOiDJtVN0YXRlQ2xhc3NJbnRlcm5hbCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzdGF0ZUNsYXNzKTtcbiAgICBjb25zdCBvcHRpb25zV2l0aEluaGVyaXRhbmNlOiDJtVN0b3JlT3B0aW9uczxUPiA9IGdldFN0YXRlT3B0aW9ucyhcbiAgICAgIGluaGVyaXRlZFN0YXRlQ2xhc3MsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgICBtdXRhdGVNZXRhRGF0YTxUPih7IG1ldGEsIGluaGVyaXRlZFN0YXRlQ2xhc3MsIG9wdGlvbnNXaXRoSW5oZXJpdGFuY2UgfSk7XG4gICAgc3RhdGVDbGFzc1vJtU1FVEFfT1BUSU9OU19LRVldID0gb3B0aW9uc1dpdGhJbmhlcml0YW5jZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVPcHRpb25zPFQ+KFxuICBpbmhlcml0ZWRTdGF0ZUNsYXNzOiDJtVN0YXRlQ2xhc3NJbnRlcm5hbCxcbiAgb3B0aW9uczogybVTdG9yZU9wdGlvbnM8VD5cbik6IMm1U3RvcmVPcHRpb25zPFQ+IHtcbiAgY29uc3QgaW5oZXJpdGFuY2VPcHRpb25zOiBQYXJ0aWFsPMm1U3RvcmVPcHRpb25zPFQ+PiA9XG4gICAgaW5oZXJpdGVkU3RhdGVDbGFzc1vJtU1FVEFfT1BUSU9OU19LRVldIHx8IHt9O1xuICByZXR1cm4geyAuLi5pbmhlcml0YW5jZU9wdGlvbnMsIC4uLm9wdGlvbnMgfSBhcyDJtVN0b3JlT3B0aW9uczxUPjtcbn1cblxuZnVuY3Rpb24gbXV0YXRlTWV0YURhdGE8VD4ocGFyYW1zOiBNdXRhdGVNZXRhT3B0aW9uczxUPik6IHZvaWQge1xuICBjb25zdCB7IG1ldGEsIGluaGVyaXRlZFN0YXRlQ2xhc3MsIG9wdGlvbnNXaXRoSW5oZXJpdGFuY2UgfSA9IHBhcmFtcztcbiAgY29uc3QgeyBjaGlsZHJlbiwgZGVmYXVsdHMsIG5hbWUgfSA9IG9wdGlvbnNXaXRoSW5oZXJpdGFuY2U7XG4gIGNvbnN0IHN0YXRlTmFtZTogc3RyaW5nIHwgbnVsbCA9XG4gICAgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnID8gbmFtZSA6IChuYW1lICYmIG5hbWUuZ2V0TmFtZSgpKSB8fCBudWxsO1xuXG4gIGlmICh0eXBlb2YgbmdEZXZNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ0Rldk1vZGUpIHtcbiAgICBlbnN1cmVTdGF0ZU5hbWVJc1ZhbGlkKHN0YXRlTmFtZSk7XG4gIH1cblxuICBpZiAoaW5oZXJpdGVkU3RhdGVDbGFzcy5oYXNPd25Qcm9wZXJ0eSjJtU1FVEFfS0VZKSkge1xuICAgIGNvbnN0IGluaGVyaXRlZE1ldGE6IFBhcnRpYWw8ybVNZXRhRGF0YU1vZGVsPiA9IGluaGVyaXRlZFN0YXRlQ2xhc3NbybVNRVRBX0tFWV0gfHwge307XG4gICAgbWV0YS5hY3Rpb25zID0geyAuLi5tZXRhLmFjdGlvbnMsIC4uLmluaGVyaXRlZE1ldGEuYWN0aW9ucyB9O1xuICB9XG5cbiAgbWV0YS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICBtZXRhLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gIG1ldGEubmFtZSA9IHN0YXRlTmFtZTtcbn1cbiJdfQ==