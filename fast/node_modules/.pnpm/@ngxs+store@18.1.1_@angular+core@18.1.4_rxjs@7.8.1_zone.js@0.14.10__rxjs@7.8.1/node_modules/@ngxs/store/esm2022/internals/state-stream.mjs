import { Injectable, untracked } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ɵwrapObserverCalls } from './custom-rxjs-operators';
import { ɵOrderedBehaviorSubject } from './custom-rxjs-subjects';
import * as i0 from "@angular/core";
/**
 * BehaviorSubject of the entire state.
 * @ignore
 */
export class ɵStateStream extends ɵOrderedBehaviorSubject {
    constructor() {
        super({});
        this.state = toSignal(this.pipe(ɵwrapObserverCalls(untracked)), {
            manualCleanup: true,
            requireSync: true
        });
    }
    ngOnDestroy() {
        // The StateStream should never emit values once the root view is removed,
        // such as when the `NgModuleRef.destroy()` method is called. This is crucial
        // for preventing memory leaks in server-side rendered apps, where a new StateStream
        // is created for each HTTP request. If users forget to unsubscribe from `store.select`
        // or `store.subscribe`, it can result in significant memory leaks in SSR apps.
        this.complete();
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵStateStream, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵStateStream, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ɵStateStream, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtc3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvaW50ZXJuYWxzL3NyYy9zdGF0ZS1zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBcUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFHakU7OztHQUdHO0FBRUgsTUFBTSxPQUFPLFlBQWEsU0FBUSx1QkFBcUM7SUFNckU7UUFDRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFOSCxVQUFLLEdBQXlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7WUFDeEYsYUFBYSxFQUFFLElBQUk7WUFDbkIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFDO0lBSUgsQ0FBQztJQUVELFdBQVc7UUFDVCwwRUFBMEU7UUFDMUUsNkVBQTZFO1FBQzdFLG9GQUFvRjtRQUNwRix1RkFBdUY7UUFDdkYsK0VBQStFO1FBQy9FLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO2lJQWpCVSxZQUFZO3FJQUFaLFlBQVksY0FEQyxNQUFNOzsyRkFDbkIsWUFBWTtrQkFEeEIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIFNpZ25hbCwgdW50cmFja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0b1NpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcblxuaW1wb3J0IHsgybV3cmFwT2JzZXJ2ZXJDYWxscyB9IGZyb20gJy4vY3VzdG9tLXJ4anMtb3BlcmF0b3JzJztcbmltcG9ydCB7IMm1T3JkZXJlZEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJy4vY3VzdG9tLXJ4anMtc3ViamVjdHMnO1xuaW1wb3J0IHsgybVQbGFpbk9iamVjdCB9IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKlxuICogQmVoYXZpb3JTdWJqZWN0IG9mIHRoZSBlbnRpcmUgc3RhdGUuXG4gKiBAaWdub3JlXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgybVTdGF0ZVN0cmVhbSBleHRlbmRzIMm1T3JkZXJlZEJlaGF2aW9yU3ViamVjdDzJtVBsYWluT2JqZWN0PiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHJlYWRvbmx5IHN0YXRlOiBTaWduYWw8ybVQbGFpbk9iamVjdD4gPSB0b1NpZ25hbCh0aGlzLnBpcGUoybV3cmFwT2JzZXJ2ZXJDYWxscyh1bnRyYWNrZWQpKSwge1xuICAgIG1hbnVhbENsZWFudXA6IHRydWUsXG4gICAgcmVxdWlyZVN5bmM6IHRydWVcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe30pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgLy8gVGhlIFN0YXRlU3RyZWFtIHNob3VsZCBuZXZlciBlbWl0IHZhbHVlcyBvbmNlIHRoZSByb290IHZpZXcgaXMgcmVtb3ZlZCxcbiAgICAvLyBzdWNoIGFzIHdoZW4gdGhlIGBOZ01vZHVsZVJlZi5kZXN0cm95KClgIG1ldGhvZCBpcyBjYWxsZWQuIFRoaXMgaXMgY3J1Y2lhbFxuICAgIC8vIGZvciBwcmV2ZW50aW5nIG1lbW9yeSBsZWFrcyBpbiBzZXJ2ZXItc2lkZSByZW5kZXJlZCBhcHBzLCB3aGVyZSBhIG5ldyBTdGF0ZVN0cmVhbVxuICAgIC8vIGlzIGNyZWF0ZWQgZm9yIGVhY2ggSFRUUCByZXF1ZXN0LiBJZiB1c2VycyBmb3JnZXQgdG8gdW5zdWJzY3JpYmUgZnJvbSBgc3RvcmUuc2VsZWN0YFxuICAgIC8vIG9yIGBzdG9yZS5zdWJzY3JpYmVgLCBpdCBjYW4gcmVzdWx0IGluIHNpZ25pZmljYW50IG1lbW9yeSBsZWFrcyBpbiBTU1IgYXBwcy5cbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==