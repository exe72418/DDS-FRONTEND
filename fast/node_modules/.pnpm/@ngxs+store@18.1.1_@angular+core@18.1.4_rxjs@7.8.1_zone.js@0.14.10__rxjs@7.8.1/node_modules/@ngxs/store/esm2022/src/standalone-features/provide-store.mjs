import { makeEnvironmentProviders } from '@angular/core';
import { getRootProviders } from './root-providers';
import { NGXS_ROOT_ENVIRONMENT_INITIALIZER } from './initializers';
export function provideStore(states = [], ...optionsAndFeatures) {
    const features = [];
    // Options are empty by default (see `forRoot`).
    let options = {};
    if (optionsAndFeatures.length > 0) {
        if (isEnvironmentProvider(optionsAndFeatures[0])) {
            features.push(...optionsAndFeatures);
        }
        else {
            options = optionsAndFeatures[0];
            features.push(...optionsAndFeatures.slice(1));
        }
    }
    return makeEnvironmentProviders([
        ...getRootProviders(states, options),
        NGXS_ROOT_ENVIRONMENT_INITIALIZER,
        features
    ]);
}
function isEnvironmentProvider(target) {
    return !!target.Éµproviders;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS1zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JlL3NyYy9zdGFuZGFsb25lLWZlYXR1cmVzL3Byb3ZpZGUtc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF3Qix3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkvRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQThCbkUsTUFBTSxVQUFVLFlBQVksQ0FDMUIsU0FBd0IsRUFBRSxFQUMxQixHQUFHLGtCQUF5QjtJQUU1QixNQUFNLFFBQVEsR0FBMkIsRUFBRSxDQUFDO0lBQzVDLGdEQUFnRDtJQUNoRCxJQUFJLE9BQU8sR0FBc0IsRUFBRSxDQUFDO0lBRXBDLElBQUksa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xDLElBQUkscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sd0JBQXdCLENBQUM7UUFDOUIsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO1FBQ3BDLGlDQUFpQztRQUNqQyxRQUFRO0tBQ1QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsTUFBVztJQUN4QyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnZpcm9ubWVudFByb3ZpZGVycywgbWFrZUVudmlyb25tZW50UHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyDJtVN0YXRlQ2xhc3MgfSBmcm9tICdAbmd4cy9zdG9yZS9pbnRlcm5hbHMnO1xuXG5pbXBvcnQgeyBOZ3hzTW9kdWxlT3B0aW9ucyB9IGZyb20gJy4uL3N5bWJvbHMnO1xuaW1wb3J0IHsgZ2V0Um9vdFByb3ZpZGVycyB9IGZyb20gJy4vcm9vdC1wcm92aWRlcnMnO1xuaW1wb3J0IHsgTkdYU19ST09UX0VOVklST05NRU5UX0lOSVRJQUxJWkVSIH0gZnJvbSAnLi9pbml0aWFsaXplcnMnO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgZ2xvYmFsIHN0b3JlIHByb3ZpZGVycyBhbmQgaW5pdGlhbGl6ZXMgdGhlIHN0b3JlLlxuICpcbiAqIGBgYHRzXG4gKiBib290c3RyYXBBcHBsaWNhdGlvbihBcHBDb21wb25lbnQsIHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVN0b3JlKFtDb3VudHJpZXNTdGF0ZV0pXVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYHByb3ZpZGVTdG9yZWAgbWF5IGJlIG9wdGlvbmFsbHkgY2FsbGVkIHdpdGggYSBjb25maWcgYmVmb3JlIHRoZSBsaXN0IG9mIGZlYXR1cmVzOlxuICpcbiAqIGBgYHRzXG4gKiBwcm92aWRlU3RvcmUoW0NvdW50cmllc1N0YXRlXSwge1xuICogICBkZXZlbG9wbWVudE1vZGU6ICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVN0b3JlKFxuICBzdGF0ZXM/OiDJtVN0YXRlQ2xhc3NbXSxcbiAgLi4uZmVhdHVyZXM6IEVudmlyb25tZW50UHJvdmlkZXJzW11cbik6IEVudmlyb25tZW50UHJvdmlkZXJzO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVN0b3JlKFxuICBzdGF0ZXM/OiDJtVN0YXRlQ2xhc3NbXSxcbiAgb3B0aW9ucz86IE5neHNNb2R1bGVPcHRpb25zLFxuICAuLi5mZWF0dXJlczogRW52aXJvbm1lbnRQcm92aWRlcnNbXVxuKTogRW52aXJvbm1lbnRQcm92aWRlcnM7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlU3RvcmUoXG4gIHN0YXRlczogybVTdGF0ZUNsYXNzW10gPSBbXSxcbiAgLi4ub3B0aW9uc0FuZEZlYXR1cmVzOiBhbnlbXVxuKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICBjb25zdCBmZWF0dXJlczogRW52aXJvbm1lbnRQcm92aWRlcnNbXSA9IFtdO1xuICAvLyBPcHRpb25zIGFyZSBlbXB0eSBieSBkZWZhdWx0IChzZWUgYGZvclJvb3RgKS5cbiAgbGV0IG9wdGlvbnM6IE5neHNNb2R1bGVPcHRpb25zID0ge307XG5cbiAgaWYgKG9wdGlvbnNBbmRGZWF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGlzRW52aXJvbm1lbnRQcm92aWRlcihvcHRpb25zQW5kRmVhdHVyZXNbMF0pKSB7XG4gICAgICBmZWF0dXJlcy5wdXNoKC4uLm9wdGlvbnNBbmRGZWF0dXJlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zQW5kRmVhdHVyZXNbMF07XG4gICAgICBmZWF0dXJlcy5wdXNoKC4uLm9wdGlvbnNBbmRGZWF0dXJlcy5zbGljZSgxKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbXG4gICAgLi4uZ2V0Um9vdFByb3ZpZGVycyhzdGF0ZXMsIG9wdGlvbnMpLFxuICAgIE5HWFNfUk9PVF9FTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgICBmZWF0dXJlc1xuICBdKTtcbn1cblxuZnVuY3Rpb24gaXNFbnZpcm9ubWVudFByb3ZpZGVyKHRhcmdldDogYW55KTogdGFyZ2V0IGlzIEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgcmV0dXJuICEhdGFyZ2V0Lsm1cHJvdmlkZXJzO1xufVxuIl19