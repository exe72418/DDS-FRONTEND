import { ɵensureStoreMetadata } from '@ngxs/store/internals';
import { throwActionDecoratorError } from '../configs/messages.config';
/**
 * Decorates a method with action information.
 */
export function Action(actions, options) {
    return (target, name, 
    // This parameter ensures that the decorated method has a call signature that could be passed an instance of the given action(s).
    _descriptor) => {
        if (typeof ngDevMode !== 'undefined' && ngDevMode) {
            const isStaticMethod = target.hasOwnProperty('prototype');
            if (isStaticMethod) {
                throwActionDecoratorError();
            }
        }
        const meta = ɵensureStoreMetadata(target.constructor);
        const actionArray = Array.isArray(actions) ? actions : [actions];
        for (const action of actionArray) {
            const type = action.type;
            if (!meta.actions[type]) {
                meta.actions[type] = [];
            }
            meta.actions[type].push({
                fn: name,
                options: options || {},
                type
            });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvc3JjL2RlY29yYXRvcnMvYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBa0Isb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUc3RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQStDdkU7O0dBRUc7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUNwQixPQUF3QixFQUN4QixPQUF3QjtJQUV4QixPQUFPLENBQ0wsTUFBVyxFQUNYLElBQXFCO0lBQ3JCLGlJQUFpSTtJQUNqSSxXQUE0RCxFQUN0RCxFQUFFO1FBQ1IsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxFQUFFLENBQUM7WUFDbEQsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUUxRCxJQUFJLGNBQWMsRUFBRSxDQUFDO2dCQUNuQix5QkFBeUIsRUFBRSxDQUFDO1lBQzlCLENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXRELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRSxLQUFLLE1BQU0sTUFBTSxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ2pDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDMUIsQ0FBQztZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN0QixFQUFFLEVBQUUsSUFBSTtnQkFDUixPQUFPLEVBQUUsT0FBTyxJQUFJLEVBQUU7Z0JBQ3RCLElBQUk7YUFDTCxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1QWN0aW9uT3B0aW9ucywgybVlbnN1cmVTdG9yZU1ldGFkYXRhIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcblxuaW1wb3J0IHsgQWN0aW9uRGVmLCBBY3Rpb25UeXBlIH0gZnJvbSAnLi4vYWN0aW9ucy9zeW1ib2xzJztcbmltcG9ydCB7IHRocm93QWN0aW9uRGVjb3JhdG9yRXJyb3IgfSBmcm9tICcuLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XG5pbXBvcnQgeyBTdGF0ZUNvbnRleHQgfSBmcm9tICcuLi9zeW1ib2xzJztcblxuLyoqXG4gKiBHaXZlbiBhbiBhY3Rpb24gY2xhc3MsIHJldHVybnMgaXRzIHBheWxvYWQuXG4gKi9cbnR5cGUgQWN0aW9uVG9QYXlsb2FkPEFjdGlvbiBleHRlbmRzIEFjdGlvblR5cGU+ID1cbiAgQWN0aW9uIGV4dGVuZHMgQWN0aW9uRGVmPGFueSwgaW5mZXIgQWN0aW9uUGF5bG9hZD4gPyBBY3Rpb25QYXlsb2FkIDogbmV2ZXI7XG5cbi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIGFjdGlvbiBjbGFzc2VzLCByZXR1cm5zIHRoZSB1bmlvbiBvZiB0aGVpciBwYXlsb2Fkcy5cbiAqL1xudHlwZSBBY3Rpb25zVG9QYXlsb2FkPEFjdGlvbnMgZXh0ZW5kcyByZWFkb25seSBBY3Rpb25UeXBlW10+ID0ge1xuICBbSyBpbiBrZXlvZiBBY3Rpb25zXTogQWN0aW9uVG9QYXlsb2FkPEFjdGlvbnNbS10+O1xufVtudW1iZXJdO1xuXG4vKipcbiAqIEdpdmVuIGFuIGFjdGlvbiBjbGFzcyBvciBhIGxpc3Qgb2YgYWN0aW9uIGNsYXNzZXMsIHJldHVybnMgdGhlIHVuaW9uIG9mIHRoZWlyIHBheWxvYWRzLlxuICovXG50eXBlIEFjdGlvbk9yQWN0aW9uc1RvUGF5bG9hZDxBY3Rpb25PckFjdGlvbnM+ID0gQWN0aW9uT3JBY3Rpb25zIGV4dGVuZHMgQWN0aW9uVHlwZVxuICA/IEFjdGlvblRvUGF5bG9hZDxBY3Rpb25PckFjdGlvbnM+XG4gIDogQWN0aW9uT3JBY3Rpb25zIGV4dGVuZHMgQWN0aW9uVHlwZVtdXG4gICAgPyBBY3Rpb25zVG9QYXlsb2FkPEFjdGlvbk9yQWN0aW9ucz5cbiAgICA6IG5ldmVyO1xuXG4vKipcbiAqIERlc2NyaWJlcyB3aGF0IG1ldGhvZHMgY2FuIGJlIGRlY29yYXRlZCB3aXRoIGFuIGBAQWN0aW9uYCBkZWNvcmF0b3IgdGhhdCBoYXMgYmVlbiBwYXNzZWQgdGhlIGdpdmVuIGFjdGlvbihzKS5cbiAqL1xudHlwZSBIYW5kbGVyVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8QWN0aW9uT3JBY3Rpb25zPiA9XG4gIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8KCkgPT4gYW55PlxuICB8IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPChzdGF0ZUNvbnRleHQ6IFN0YXRlQ29udGV4dDxhbnk+KSA9PiBhbnk+XG4gIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8XG4gICAgICAoXG4gICAgICAgIHN0YXRlQ29udGV4dDogU3RhdGVDb250ZXh0PGFueT4sXG4gICAgICAgIGFjdGlvbjogQWN0aW9uT3JBY3Rpb25zVG9QYXlsb2FkPEFjdGlvbk9yQWN0aW9ucz5cbiAgICAgICkgPT4gYW55XG4gICAgPjtcblxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIGEgY2FsbCB0byB0aGUgYEBBY3Rpb24oKWAgZGVjb3JhdG9yIHdpdGggdGhlIGdpdmVuIGFjdGlvbihzKSBhcyBpdHMgZmlyc3QgYXJndW1lbnQuXG4gKi9cbnR5cGUgQWN0aW9uRGVjb3JhdG9yPEFjdGlvbk9yQWN0aW9ucyBleHRlbmRzIEFjdGlvblR5cGUgfCBBY3Rpb25UeXBlW10+ID0gKFxuICB0YXJnZXQ6IGFueSxcbiAgbmFtZTogc3RyaW5nIHwgc3ltYm9sLFxuICBfZGVzY3JpcHRvcjogSGFuZGxlclR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPEFjdGlvbk9yQWN0aW9ucz5cbikgPT4gdm9pZDtcblxuLyoqXG4gKiBEZWNvcmF0ZXMgYSBtZXRob2Qgd2l0aCBhY3Rpb24gaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBY3Rpb248QWN0aW9uT3JBY3Rpb25zIGV4dGVuZHMgQWN0aW9uVHlwZSB8IEFjdGlvblR5cGVbXT4oXG4gIGFjdGlvbnM6IEFjdGlvbk9yQWN0aW9ucyxcbiAgb3B0aW9ucz86IMm1QWN0aW9uT3B0aW9uc1xuKTogQWN0aW9uRGVjb3JhdG9yPEFjdGlvbk9yQWN0aW9ucz4ge1xuICByZXR1cm4gKFxuICAgIHRhcmdldDogYW55LFxuICAgIG5hbWU6IHN0cmluZyB8IHN5bWJvbCxcbiAgICAvLyBUaGlzIHBhcmFtZXRlciBlbnN1cmVzIHRoYXQgdGhlIGRlY29yYXRlZCBtZXRob2QgaGFzIGEgY2FsbCBzaWduYXR1cmUgdGhhdCBjb3VsZCBiZSBwYXNzZWQgYW4gaW5zdGFuY2Ugb2YgdGhlIGdpdmVuIGFjdGlvbihzKS5cbiAgICBfZGVzY3JpcHRvcjogSGFuZGxlclR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPEFjdGlvbk9yQWN0aW9ucz5cbiAgKTogdm9pZCA9PiB7XG4gICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgIT09ICd1bmRlZmluZWQnICYmIG5nRGV2TW9kZSkge1xuICAgICAgY29uc3QgaXNTdGF0aWNNZXRob2QgPSB0YXJnZXQuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xuXG4gICAgICBpZiAoaXNTdGF0aWNNZXRob2QpIHtcbiAgICAgICAgdGhyb3dBY3Rpb25EZWNvcmF0b3JFcnJvcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGEgPSDJtWVuc3VyZVN0b3JlTWV0YWRhdGEodGFyZ2V0LmNvbnN0cnVjdG9yKTtcblxuICAgIGNvbnN0IGFjdGlvbkFycmF5ID0gQXJyYXkuaXNBcnJheShhY3Rpb25zKSA/IGFjdGlvbnMgOiBbYWN0aW9uc107XG5cbiAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25BcnJheSkge1xuICAgICAgY29uc3QgdHlwZSA9IGFjdGlvbi50eXBlO1xuXG4gICAgICBpZiAoIW1ldGEuYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICBtZXRhLmFjdGlvbnNbdHlwZV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgbWV0YS5hY3Rpb25zW3R5cGVdLnB1c2goe1xuICAgICAgICBmbjogbmFtZSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdHlwZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuIl19