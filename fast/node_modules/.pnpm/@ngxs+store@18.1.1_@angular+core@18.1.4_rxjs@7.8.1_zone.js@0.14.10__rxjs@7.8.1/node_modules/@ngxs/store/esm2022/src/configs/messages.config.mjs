export function throwStateNameError(name) {
    throw new Error(`${name} is not a valid state name. It needs to be a valid object property name.`);
}
export function throwStateNamePropertyError() {
    throw new Error(`States must register a 'name' property.`);
}
export function throwStateUniqueError(current, newName, oldName) {
    throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);
}
export function throwStateDecoratorError(name) {
    throw new Error(`States must be decorated with @State() decorator, but "${name}" isn't.`);
}
export function throwActionDecoratorError() {
    throw new Error('@Action() decorator cannot be used with static methods.');
}
export function throwSelectorDecoratorError() {
    throw new Error('Selectors only work on methods.');
}
export function getZoneWarningMessage() {
    return ('Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\n' +
        'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\n' +
        'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })');
}
export function getUndecoratedStateWithInjectableWarningMessage(name) {
    return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;
}
export function getInvalidInitializationOrderMessage(addedStates) {
    let message = 'You have an invalid state initialization order. This typically occurs when `NgxsModule.forFeature`\n' +
        'or `provideStates` is called before `NgxsModule.forRoot` or `provideStore`.\n' +
        'One example is when `NgxsRouterPluginModule.forRoot` is called before `NgxsModule.forRoot`.';
    if (addedStates) {
        const stateNames = Object.keys(addedStates).map(stateName => `"${stateName}"`);
        message +=
            '\nFeature states added before the store initialization is complete: ' +
                `${stateNames.join(', ')}.`;
    }
    return message;
}
export function throwSelectFactoryNotConnectedError() {
    throw new Error('You have forgotten to import the NGXS module!');
}
export function throwPatchingArrayError() {
    throw new Error('Patching arrays is not supported.');
}
export function throwPatchingPrimitiveError() {
    throw new Error('Patching primitives is not supported.');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvc3JjL2NvbmZpZ3MvbWVzc2FnZXMuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFZO0lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQ2IsR0FBRyxJQUFJLDBFQUEwRSxDQUNsRixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLE9BQWUsRUFDZixPQUFlLEVBQ2YsT0FBZTtJQUVmLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxPQUFPLFVBQVUsT0FBTyxzQkFBc0IsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QixDQUFDLElBQVk7SUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQywwREFBMEQsSUFBSSxVQUFVLENBQUMsQ0FBQztBQUM1RixDQUFDO0FBRUQsTUFBTSxVQUFVLHlCQUF5QjtJQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCO0lBQ25DLE9BQU8sQ0FDTCw2R0FBNkc7UUFDN0csd0ZBQXdGO1FBQ3hGLDhFQUE4RSxDQUMvRSxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSwrQ0FBK0MsQ0FBQyxJQUFZO0lBQzFFLE9BQU8sSUFBSSxJQUFJLG1GQUFtRixDQUFDO0FBQ3JHLENBQUM7QUFFRCxNQUFNLFVBQVUsb0NBQW9DLENBQUMsV0FBMEI7SUFDN0UsSUFBSSxPQUFPLEdBQ1Qsc0dBQXNHO1FBQ3RHLCtFQUErRTtRQUMvRSw2RkFBNkYsQ0FBQztJQUVoRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBRS9FLE9BQU87WUFDTCxzRUFBc0U7Z0JBQ3RFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxVQUFVLG1DQUFtQztJQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUI7SUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCO0lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVQbGFpbk9iamVjdCB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1N0YXRlTmFtZUVycm9yKG5hbWU6IHN0cmluZyk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuIEl0IG5lZWRzIHRvIGJlIGEgdmFsaWQgb2JqZWN0IHByb3BlcnR5IG5hbWUuYFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dTdGF0ZU5hbWVQcm9wZXJ0eUVycm9yKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBTdGF0ZXMgbXVzdCByZWdpc3RlciBhICduYW1lJyBwcm9wZXJ0eS5gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93U3RhdGVVbmlxdWVFcnJvcihcbiAgY3VycmVudDogc3RyaW5nLFxuICBuZXdOYW1lOiBzdHJpbmcsXG4gIG9sZE5hbWU6IHN0cmluZ1xuKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoYFN0YXRlIG5hbWUgJyR7Y3VycmVudH0nIGZyb20gJHtuZXdOYW1lfSBhbHJlYWR5IGV4aXN0cyBpbiAke29sZE5hbWV9LmApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dTdGF0ZURlY29yYXRvckVycm9yKG5hbWU6IHN0cmluZyk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBTdGF0ZXMgbXVzdCBiZSBkZWNvcmF0ZWQgd2l0aCBAU3RhdGUoKSBkZWNvcmF0b3IsIGJ1dCBcIiR7bmFtZX1cIiBpc24ndC5gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93QWN0aW9uRGVjb3JhdG9yRXJyb3IoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0BBY3Rpb24oKSBkZWNvcmF0b3IgY2Fubm90IGJlIHVzZWQgd2l0aCBzdGF0aWMgbWV0aG9kcy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93U2VsZWN0b3JEZWNvcmF0b3JFcnJvcigpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3JzIG9ubHkgd29yayBvbiBtZXRob2RzLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Wm9uZVdhcm5pbmdNZXNzYWdlKCk6IHN0cmluZyB7XG4gIHJldHVybiAoXG4gICAgJ1lvdXIgYXBwbGljYXRpb24gd2FzIGJvb3RzdHJhcHBlZCB3aXRoIG5vb3BlZCB6b25lIGFuZCB5b3VyIGV4ZWN1dGlvbiBzdHJhdGVneSByZXF1aXJlcyBhbiBhY3R1YWwgTmdab25lIVxcbicgK1xuICAgICdQbGVhc2Ugc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZXhlY3V0aW9uU3RyYXRlZ3kgcHJvcGVydHkgdG8gTm9vcE5neHNFeGVjdXRpb25TdHJhdGVneS5cXG4nICtcbiAgICAnTmd4c01vZHVsZS5mb3JSb290KHN0YXRlcywgeyBleGVjdXRpb25TdHJhdGVneTogTm9vcE5neHNFeGVjdXRpb25TdHJhdGVneSB9KSdcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuZGVjb3JhdGVkU3RhdGVXaXRoSW5qZWN0YWJsZVdhcm5pbmdNZXNzYWdlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJyR7bmFtZX0nIGNsYXNzIHNob3VsZCBiZSBkZWNvcmF0ZWQgd2l0aCBASW5qZWN0YWJsZSgpIHJpZ2h0IGFmdGVyIHRoZSBAU3RhdGUoKSBkZWNvcmF0b3JgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52YWxpZEluaXRpYWxpemF0aW9uT3JkZXJNZXNzYWdlKGFkZGVkU3RhdGVzPzogybVQbGFpbk9iamVjdCkge1xuICBsZXQgbWVzc2FnZSA9XG4gICAgJ1lvdSBoYXZlIGFuIGludmFsaWQgc3RhdGUgaW5pdGlhbGl6YXRpb24gb3JkZXIuIFRoaXMgdHlwaWNhbGx5IG9jY3VycyB3aGVuIGBOZ3hzTW9kdWxlLmZvckZlYXR1cmVgXFxuJyArXG4gICAgJ29yIGBwcm92aWRlU3RhdGVzYCBpcyBjYWxsZWQgYmVmb3JlIGBOZ3hzTW9kdWxlLmZvclJvb3RgIG9yIGBwcm92aWRlU3RvcmVgLlxcbicgK1xuICAgICdPbmUgZXhhbXBsZSBpcyB3aGVuIGBOZ3hzUm91dGVyUGx1Z2luTW9kdWxlLmZvclJvb3RgIGlzIGNhbGxlZCBiZWZvcmUgYE5neHNNb2R1bGUuZm9yUm9vdGAuJztcblxuICBpZiAoYWRkZWRTdGF0ZXMpIHtcbiAgICBjb25zdCBzdGF0ZU5hbWVzID0gT2JqZWN0LmtleXMoYWRkZWRTdGF0ZXMpLm1hcChzdGF0ZU5hbWUgPT4gYFwiJHtzdGF0ZU5hbWV9XCJgKTtcblxuICAgIG1lc3NhZ2UgKz1cbiAgICAgICdcXG5GZWF0dXJlIHN0YXRlcyBhZGRlZCBiZWZvcmUgdGhlIHN0b3JlIGluaXRpYWxpemF0aW9uIGlzIGNvbXBsZXRlOiAnICtcbiAgICAgIGAke3N0YXRlTmFtZXMuam9pbignLCAnKX0uYDtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgdGhlIE5HWFMgbW9kdWxlIScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQYXRjaGluZ0FycmF5RXJyb3IoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1BhdGNoaW5nIGFycmF5cyBpcyBub3Qgc3VwcG9ydGVkLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQYXRjaGluZ1ByaW1pdGl2ZUVycm9yKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdQYXRjaGluZyBwcmltaXRpdmVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG59XG4iXX0=