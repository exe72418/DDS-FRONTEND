import { isStateOperator, isUndefined, isPredicate } from './utils';
function retrieveValue(operatorOrValue, existing) {
    // If state operator is a function
    // then call it with an original value
    if (isStateOperator(operatorOrValue)) {
        const value = operatorOrValue(existing);
        return value;
    }
    // If operator or value was not provided
    // e.g. `elseOperatorOrValue` is `undefined`
    // then we just return an original value
    if (isUndefined(operatorOrValue)) {
        return existing;
    }
    return operatorOrValue;
}
/**
 * @param condition - Condition can be a plain boolean value or a function,
 * that returns boolean, also this function can take a value as an argument
 * to which this state operator applies
 * @param trueOperatorOrValue - Any value or a state operator
 * @param elseOperatorOrValue - Any value or a state operator
 */
export function iif(condition, trueOperatorOrValue, elseOperatorOrValue) {
    return function iifOperator(existing) {
        // Convert the value to a boolean
        let result = !!condition;
        // but if it is a function then run it to get the result
        if (isPredicate(condition)) {
            result = condition(existing);
        }
        if (result) {
            return retrieveValue(trueOperatorOrValue, existing);
        }
        return retrieveValue(elseOperatorOrValue, existing);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWlmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvb3BlcmF0b3JzL3NyYy9paWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFhLE1BQU0sU0FBUyxDQUFDO0FBRS9FLFNBQVMsYUFBYSxDQUNwQixlQUFxQyxFQUNyQyxRQUEwQjtJQUUxQixrQ0FBa0M7SUFDbEMsc0NBQXNDO0lBQ3RDLElBQUksZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sS0FBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsNENBQTRDO0lBQzVDLHdDQUF3QztJQUN4QyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sUUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxPQUFPLGVBQW9CLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxHQUFHLENBQ2pCLFNBQTBDLEVBQzFDLG1CQUFrRCxFQUNsRCxtQkFBbUQ7SUFFbkQsT0FBTyxTQUFTLFdBQVcsQ0FBQyxRQUEwQjtRQUNwRCxpQ0FBaUM7UUFDakMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6Qix3REFBd0Q7UUFDeEQsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUMzQixNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQWEsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsT0FBTyxhQUFhLENBQUksbUJBQTJDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakYsQ0FBQztRQUVELE9BQU8sYUFBYSxDQUFJLG1CQUE0QyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeGlzdGluZ1N0YXRlLCBOb0luZmVyLCBTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7IGlzU3RhdGVPcGVyYXRvciwgaXNVbmRlZmluZWQsIGlzUHJlZGljYXRlLCBQcmVkaWNhdGUgfSBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gcmV0cmlldmVWYWx1ZTxUPihcbiAgb3BlcmF0b3JPclZhbHVlOiBTdGF0ZU9wZXJhdG9yPFQ+IHwgVCxcbiAgZXhpc3Rpbmc6IEV4aXN0aW5nU3RhdGU8VD5cbik6IFQge1xuICAvLyBJZiBzdGF0ZSBvcGVyYXRvciBpcyBhIGZ1bmN0aW9uXG4gIC8vIHRoZW4gY2FsbCBpdCB3aXRoIGFuIG9yaWdpbmFsIHZhbHVlXG4gIGlmIChpc1N0YXRlT3BlcmF0b3Iob3BlcmF0b3JPclZhbHVlKSkge1xuICAgIGNvbnN0IHZhbHVlID0gb3BlcmF0b3JPclZhbHVlKGV4aXN0aW5nKTtcbiAgICByZXR1cm4gdmFsdWUgYXMgVDtcbiAgfVxuXG4gIC8vIElmIG9wZXJhdG9yIG9yIHZhbHVlIHdhcyBub3QgcHJvdmlkZWRcbiAgLy8gZS5nLiBgZWxzZU9wZXJhdG9yT3JWYWx1ZWAgaXMgYHVuZGVmaW5lZGBcbiAgLy8gdGhlbiB3ZSBqdXN0IHJldHVybiBhbiBvcmlnaW5hbCB2YWx1ZVxuICBpZiAoaXNVbmRlZmluZWQob3BlcmF0b3JPclZhbHVlKSkge1xuICAgIHJldHVybiBleGlzdGluZyBhcyBUO1xuICB9XG5cbiAgcmV0dXJuIG9wZXJhdG9yT3JWYWx1ZSBhcyBUO1xufVxuXG4vKipcbiAqIEBwYXJhbSBjb25kaXRpb24gLSBDb25kaXRpb24gY2FuIGJlIGEgcGxhaW4gYm9vbGVhbiB2YWx1ZSBvciBhIGZ1bmN0aW9uLFxuICogdGhhdCByZXR1cm5zIGJvb2xlYW4sIGFsc28gdGhpcyBmdW5jdGlvbiBjYW4gdGFrZSBhIHZhbHVlIGFzIGFuIGFyZ3VtZW50XG4gKiB0byB3aGljaCB0aGlzIHN0YXRlIG9wZXJhdG9yIGFwcGxpZXNcbiAqIEBwYXJhbSB0cnVlT3BlcmF0b3JPclZhbHVlIC0gQW55IHZhbHVlIG9yIGEgc3RhdGUgb3BlcmF0b3JcbiAqIEBwYXJhbSBlbHNlT3BlcmF0b3JPclZhbHVlIC0gQW55IHZhbHVlIG9yIGEgc3RhdGUgb3BlcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlpZjxUPihcbiAgY29uZGl0aW9uOiBOb0luZmVyPFByZWRpY2F0ZTxUPj4gfCBib29sZWFuLFxuICB0cnVlT3BlcmF0b3JPclZhbHVlOiBOb0luZmVyPFN0YXRlT3BlcmF0b3I8VD4gfCBUPixcbiAgZWxzZU9wZXJhdG9yT3JWYWx1ZT86IE5vSW5mZXI8U3RhdGVPcGVyYXRvcjxUPiB8IFQ+XG4pOiBTdGF0ZU9wZXJhdG9yPFQ+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlpZk9wZXJhdG9yKGV4aXN0aW5nOiBFeGlzdGluZ1N0YXRlPFQ+KTogVCB7XG4gICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gYSBib29sZWFuXG4gICAgbGV0IHJlc3VsdCA9ICEhY29uZGl0aW9uO1xuICAgIC8vIGJ1dCBpZiBpdCBpcyBhIGZ1bmN0aW9uIHRoZW4gcnVuIGl0IHRvIGdldCB0aGUgcmVzdWx0XG4gICAgaWYgKGlzUHJlZGljYXRlKGNvbmRpdGlvbikpIHtcbiAgICAgIHJlc3VsdCA9IGNvbmRpdGlvbihleGlzdGluZyBhcyBUKTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmV0cmlldmVWYWx1ZTxUPih0cnVlT3BlcmF0b3JPclZhbHVlIGFzIFN0YXRlT3BlcmF0b3I8VD4gfCBULCBleGlzdGluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHJpZXZlVmFsdWU8VD4oZWxzZU9wZXJhdG9yT3JWYWx1ZSEgYXMgU3RhdGVPcGVyYXRvcjxUPiB8IFQsIGV4aXN0aW5nKTtcbiAgfTtcbn1cbiJdfQ==