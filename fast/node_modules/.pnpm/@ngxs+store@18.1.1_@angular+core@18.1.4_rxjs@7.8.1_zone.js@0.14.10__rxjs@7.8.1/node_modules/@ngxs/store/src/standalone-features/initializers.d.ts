import { InjectionToken, Provider } from '@angular/core';
/**
 * This function is shared by both NgModule and standalone features.
 * When using `NgxsModule.forRoot` and `provideStore`, we can depend on the
 * same initialization functionality.
 */
export declare function rootStoreInitializer(): void;
/**
 * This function is utilized by both NgModule and standalone features.
 * When using `NgxsModule.forFeature` and `provideStates`, we can depend on
 * the same initialization functionality.
 */
export declare function featureStatesInitializer(): void;
/**
 * InjectionToken that registers the global Store.
 */
export declare const NGXS_ROOT_STORE_INITIALIZER: InjectionToken<void>;
/**
 * InjectionToken that registers feature states.
 */
export declare const NGXS_FEATURE_STORE_INITIALIZER: InjectionToken<void>;
export declare const NGXS_ROOT_ENVIRONMENT_INITIALIZER: Provider[];
/**
 * The `NGXS_FEATURE_ENVIRONMENT_INITIALIZER` functions as an environment initializer
 * at the `Route` level. Angular Router creates an environment route injector for each
 * matched route where navigation occurs. The injector is created once, ensuring that
 * the feature states initialization only happens once as well.
 */
export declare const NGXS_FEATURE_ENVIRONMENT_INITIALIZER: Provider[];
