import { inject, ENVIRONMENT_INITIALIZER, makeEnvironmentProviders } from '@angular/core';
import { ɵALL_STATES_PERSISTED } from '@ngxs/storage-plugin/internals';
import { ɵNgxsStoragePluginKeysManager } from './keys-manager';
const NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;
export function withStorageFeature(storageKeys) {
    return makeEnvironmentProviders([
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: () => {
                const allStatesPersisted = inject(ɵALL_STATES_PERSISTED);
                if (allStatesPersisted) {
                    if (NG_DEV_MODE) {
                        const message = 'The NGXS storage plugin is currently persisting all states because the `keys` ' +
                            'option was explicitly set to `*` at the root level. To selectively persist states, ' +
                            'consider explicitly specifying them, allowing for addition at the feature level.';
                        console.error(message);
                    }
                    // We should prevent the addition of any feature states to persistence
                    // if the `keys` property is set to `*`, as this could disrupt the algorithm
                    // used in the storage plugin. Instead, we should log an error in development
                    // mode. In production, it should continue to function, but act as a no-op.
                    return;
                }
                inject(ɵNgxsStoragePluginKeysManager).addKeys(storageKeys);
            }
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1zdG9yYWdlLWZlYXR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yYWdlLXBsdWdpbi9zcmMvd2l0aC1zdG9yYWdlLWZlYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE1BQU0sRUFFTix1QkFBdUIsRUFDdkIsd0JBQXdCLEVBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRW5GLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSS9ELE1BQU0sV0FBVyxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUM7QUFFbEUsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFdBQXlCO0lBQzFELE9BQU8sd0JBQXdCLENBQUM7UUFDOUI7WUFDRSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDYixNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2dCQUV6RCxJQUFJLGtCQUFrQixFQUFFLENBQUM7b0JBQ3ZCLElBQUksV0FBVyxFQUFFLENBQUM7d0JBQ2hCLE1BQU0sT0FBTyxHQUNYLGdGQUFnRjs0QkFDaEYscUZBQXFGOzRCQUNyRixrRkFBa0YsQ0FBQzt3QkFFckYsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDekIsQ0FBQztvQkFFRCxzRUFBc0U7b0JBQ3RFLDRFQUE0RTtvQkFDNUUsNkVBQTZFO29CQUM3RSwyRUFBMkU7b0JBQzNFLE9BQU87Z0JBQ1QsQ0FBQztnQkFFRCxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0QsQ0FBQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGluamVjdCxcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yYWdlS2V5LCDJtUFMTF9TVEFURVNfUEVSU0lTVEVEIH0gZnJvbSAnQG5neHMvc3RvcmFnZS1wbHVnaW4vaW50ZXJuYWxzJztcblxuaW1wb3J0IHsgybVOZ3hzU3RvcmFnZVBsdWdpbktleXNNYW5hZ2VyIH0gZnJvbSAnLi9rZXlzLW1hbmFnZXInO1xuXG5kZWNsYXJlIGNvbnN0IG5nRGV2TW9kZTogYm9vbGVhbjtcblxuY29uc3QgTkdfREVWX01PREUgPSB0eXBlb2YgbmdEZXZNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ0Rldk1vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU3RvcmFnZUZlYXR1cmUoc3RvcmFnZUtleXM6IFN0b3JhZ2VLZXlbXSk6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbXG4gICAge1xuICAgICAgcHJvdmlkZTogRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZVZhbHVlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFsbFN0YXRlc1BlcnNpc3RlZCA9IGluamVjdCjJtUFMTF9TVEFURVNfUEVSU0lTVEVEKTtcblxuICAgICAgICBpZiAoYWxsU3RhdGVzUGVyc2lzdGVkKSB7XG4gICAgICAgICAgaWYgKE5HX0RFVl9NT0RFKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID1cbiAgICAgICAgICAgICAgJ1RoZSBOR1hTIHN0b3JhZ2UgcGx1Z2luIGlzIGN1cnJlbnRseSBwZXJzaXN0aW5nIGFsbCBzdGF0ZXMgYmVjYXVzZSB0aGUgYGtleXNgICcgK1xuICAgICAgICAgICAgICAnb3B0aW9uIHdhcyBleHBsaWNpdGx5IHNldCB0byBgKmAgYXQgdGhlIHJvb3QgbGV2ZWwuIFRvIHNlbGVjdGl2ZWx5IHBlcnNpc3Qgc3RhdGVzLCAnICtcbiAgICAgICAgICAgICAgJ2NvbnNpZGVyIGV4cGxpY2l0bHkgc3BlY2lmeWluZyB0aGVtLCBhbGxvd2luZyBmb3IgYWRkaXRpb24gYXQgdGhlIGZlYXR1cmUgbGV2ZWwuJztcblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXZSBzaG91bGQgcHJldmVudCB0aGUgYWRkaXRpb24gb2YgYW55IGZlYXR1cmUgc3RhdGVzIHRvIHBlcnNpc3RlbmNlXG4gICAgICAgICAgLy8gaWYgdGhlIGBrZXlzYCBwcm9wZXJ0eSBpcyBzZXQgdG8gYCpgLCBhcyB0aGlzIGNvdWxkIGRpc3J1cHQgdGhlIGFsZ29yaXRobVxuICAgICAgICAgIC8vIHVzZWQgaW4gdGhlIHN0b3JhZ2UgcGx1Z2luLiBJbnN0ZWFkLCB3ZSBzaG91bGQgbG9nIGFuIGVycm9yIGluIGRldmVsb3BtZW50XG4gICAgICAgICAgLy8gbW9kZS4gSW4gcHJvZHVjdGlvbiwgaXQgc2hvdWxkIGNvbnRpbnVlIHRvIGZ1bmN0aW9uLCBidXQgYWN0IGFzIGEgbm8tb3AuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5qZWN0KMm1Tmd4c1N0b3JhZ2VQbHVnaW5LZXlzTWFuYWdlcikuYWRkS2V5cyhzdG9yYWdlS2V5cyk7XG4gICAgICB9XG4gICAgfVxuICBdKTtcbn1cbiJdfQ==