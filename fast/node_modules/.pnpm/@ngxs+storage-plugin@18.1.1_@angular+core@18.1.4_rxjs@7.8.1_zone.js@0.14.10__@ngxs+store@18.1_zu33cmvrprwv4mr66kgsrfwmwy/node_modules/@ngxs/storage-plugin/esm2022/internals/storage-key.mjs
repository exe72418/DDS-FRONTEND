import { StateToken } from '@ngxs/store';
import { ɵMETA_OPTIONS_KEY } from '@ngxs/store/internals';
/** Determines whether the provided key has the following structure. */
export function ɵisKeyWithExplicitEngine(key) {
    return key != null && !!key.engine;
}
export function ɵextractStringKey(storageKey) {
    // Extract the actual key out of the `{ key, engine }` structure.
    if (ɵisKeyWithExplicitEngine(storageKey)) {
        storageKey = storageKey.key;
    }
    // Given the `storageKey` is a class, for instance, `AuthState`.
    // We should retrieve its metadata and the `name` property.
    // The `name` property might be a string (state name) or a state token.
    if (storageKey.hasOwnProperty(ɵMETA_OPTIONS_KEY)) {
        storageKey = storageKey[ɵMETA_OPTIONS_KEY].name;
    }
    return storageKey instanceof StateToken ? storageKey.getName() : storageKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1rZXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yYWdlLXBsdWdpbi9pbnRlcm5hbHMvc3JjL3N0b3JhZ2Uta2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFlLE1BQU0sdUJBQXVCLENBQUM7QUFVdkUsdUVBQXVFO0FBQ3ZFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxHQUFRO0lBQy9DLE9BQU8sR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxDQUFDO0FBUUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFVBQXNCO0lBQ3RELGlFQUFpRTtJQUNqRSxJQUFJLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDekMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFDOUIsQ0FBQztJQUVELGdFQUFnRTtJQUNoRSwyREFBMkQ7SUFDM0QsdUVBQXVFO0lBQ3ZFLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7UUFDakQsVUFBVSxHQUFJLFVBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0QsQ0FBQztJQUVELE9BQU8sVUFBVSxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBUyxVQUFVLENBQUM7QUFDdEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdGF0ZVRva2VuIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xuaW1wb3J0IHsgybVNRVRBX09QVElPTlNfS0VZLCDJtVN0YXRlQ2xhc3MgfSBmcm9tICdAbmd4cy9zdG9yZS9pbnRlcm5hbHMnO1xuXG5pbXBvcnQgeyBTdG9yYWdlRW5naW5lIH0gZnJvbSAnLi9zeW1ib2xzJztcblxuLyoqIFRoaXMgZW5hYmxlcyB0aGUgdXNlciB0byBwcm92aWRlIGEgc3RvcmFnZSBlbmdpbmUgcGVyIGluZGl2aWR1YWwga2V5LiAqL1xuZXhwb3J0IGludGVyZmFjZSBLZXlXaXRoRXhwbGljaXRFbmdpbmUge1xuICBrZXk6IHN0cmluZyB8IMm1U3RhdGVDbGFzcyB8IFN0YXRlVG9rZW48YW55PjtcbiAgZW5naW5lOiBUeXBlPFN0b3JhZ2VFbmdpbmU+IHwgSW5qZWN0aW9uVG9rZW48U3RvcmFnZUVuZ2luZT47XG59XG5cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGtleSBoYXMgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmUuICovXG5leHBvcnQgZnVuY3Rpb24gybVpc0tleVdpdGhFeHBsaWNpdEVuZ2luZShrZXk6IGFueSk6IGtleSBpcyBLZXlXaXRoRXhwbGljaXRFbmdpbmUge1xuICByZXR1cm4ga2V5ICE9IG51bGwgJiYgISFrZXkuZW5naW5lO1xufVxuXG4vKipcbiAqIFRoaXMgdHVwbGVzIGFsbCBvZiB0aGUgcG9zc2libGUgdHlwZXMgYWxsb3dlZCBpbiB0aGUgYGtleWAgcHJvcGVydHkuXG4gKiBUaGlzIGlzIG5vdCBleHBvc2VkIHB1YmxpY2x5IGFuZCB1c2VkIGludGVybmFsbHkgb25seS5cbiAqL1xuZXhwb3J0IHR5cGUgU3RvcmFnZUtleSA9IHN0cmluZyB8IMm1U3RhdGVDbGFzcyB8IFN0YXRlVG9rZW48YW55PiB8IEtleVdpdGhFeHBsaWNpdEVuZ2luZTtcblxuZXhwb3J0IGZ1bmN0aW9uIMm1ZXh0cmFjdFN0cmluZ0tleShzdG9yYWdlS2V5OiBTdG9yYWdlS2V5KTogc3RyaW5nIHtcbiAgLy8gRXh0cmFjdCB0aGUgYWN0dWFsIGtleSBvdXQgb2YgdGhlIGB7IGtleSwgZW5naW5lIH1gIHN0cnVjdHVyZS5cbiAgaWYgKMm1aXNLZXlXaXRoRXhwbGljaXRFbmdpbmUoc3RvcmFnZUtleSkpIHtcbiAgICBzdG9yYWdlS2V5ID0gc3RvcmFnZUtleS5rZXk7XG4gIH1cblxuICAvLyBHaXZlbiB0aGUgYHN0b3JhZ2VLZXlgIGlzIGEgY2xhc3MsIGZvciBpbnN0YW5jZSwgYEF1dGhTdGF0ZWAuXG4gIC8vIFdlIHNob3VsZCByZXRyaWV2ZSBpdHMgbWV0YWRhdGEgYW5kIHRoZSBgbmFtZWAgcHJvcGVydHkuXG4gIC8vIFRoZSBgbmFtZWAgcHJvcGVydHkgbWlnaHQgYmUgYSBzdHJpbmcgKHN0YXRlIG5hbWUpIG9yIGEgc3RhdGUgdG9rZW4uXG4gIGlmIChzdG9yYWdlS2V5Lmhhc093blByb3BlcnR5KMm1TUVUQV9PUFRJT05TX0tFWSkpIHtcbiAgICBzdG9yYWdlS2V5ID0gKHN0b3JhZ2VLZXkgYXMgYW55KVvJtU1FVEFfT1BUSU9OU19LRVldLm5hbWU7XG4gIH1cblxuICByZXR1cm4gc3RvcmFnZUtleSBpbnN0YW5jZW9mIFN0YXRlVG9rZW4gPyBzdG9yYWdlS2V5LmdldE5hbWUoKSA6IDxzdHJpbmc+c3RvcmFnZUtleTtcbn1cbiJdfQ==