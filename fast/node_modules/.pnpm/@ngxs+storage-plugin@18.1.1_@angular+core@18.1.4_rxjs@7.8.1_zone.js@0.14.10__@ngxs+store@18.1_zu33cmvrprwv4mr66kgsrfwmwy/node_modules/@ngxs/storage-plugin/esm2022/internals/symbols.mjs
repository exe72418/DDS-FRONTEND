import { InjectionToken, inject } from '@angular/core';
/**
 * The following key is used to store the entire serialized
 * state when no specific state is provided.
 */
export const ɵDEFAULT_STATE_KEY = '@@STATE';
const NG_DEV_MODE = typeof ngDevMode !== 'undefined' && ngDevMode;
export const ɵUSER_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'USER_OPTIONS' : '');
// Determines whether all states in the NGXS registry should be persisted or not.
export const ɵALL_STATES_PERSISTED = new InjectionToken(NG_DEV_MODE ? 'ALL_STATES_PERSISTED' : '', {
    providedIn: 'root',
    factory: () => inject(ɵUSER_OPTIONS).keys === '*'
});
export const ɵNGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'NGXS_STORAGE_PLUGIN_OPTIONS' : '');
export const STORAGE_ENGINE = new InjectionToken(NG_DEV_MODE ? 'STORAGE_ENGINE' : '');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JhZ2UtcGx1Z2luL2ludGVybmFscy9zcmMvc3ltYm9scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl2RDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxTQUFTLENBQUM7QUFJNUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQztBQTZFbEUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUM3QyxXQUFXLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNsQyxDQUFDO0FBRUYsaUZBQWlGO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNyRCxXQUFXLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3pDO0lBQ0UsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRztDQUNsRCxDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FDdkMsSUFBSSxjQUFjLENBQ2hCLFdBQVcsQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDakQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FDOUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdG9yYWdlS2V5IH0gZnJvbSAnLi9zdG9yYWdlLWtleSc7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBrZXkgaXMgdXNlZCB0byBzdG9yZSB0aGUgZW50aXJlIHNlcmlhbGl6ZWRcbiAqIHN0YXRlIHdoZW4gbm8gc3BlY2lmaWMgc3RhdGUgaXMgcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBjb25zdCDJtURFRkFVTFRfU1RBVEVfS0VZID0gJ0BAU1RBVEUnO1xuXG5kZWNsYXJlIGNvbnN0IG5nRGV2TW9kZTogYm9vbGVhbjtcblxuY29uc3QgTkdfREVWX01PREUgPSB0eXBlb2YgbmdEZXZNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ0Rldk1vZGU7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFN0b3JhZ2VPcHRpb24ge1xuICBMb2NhbFN0b3JhZ2UsXG4gIFNlc3Npb25TdG9yYWdlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIHtcbiAgLyoqXG4gICAqIEtleXMgZm9yIHRoZSBzdGF0ZSBzbGljZSB0byBzdG9yZSBpbiB0aGUgc3RvcmFnZSBlbmdpbmUuXG4gICAqL1xuICBrZXlzOiAnKicgfCBTdG9yYWdlS2V5W107XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lc3BhY2UgaXMgdXNlZCB0byBwcmVmaXggdGhlIGtleSBmb3IgdGhlIHN0YXRlIHNsaWNlLiBUaGlzIGlzXG4gICAqIG5lY2Vzc2FyeSB3aGVuIHJ1bm5pbmcgbWljcm8gZnJvbnRlbmQgYXBwbGljYXRpb25zIHdoaWNoIHVzZSBzdG9yYWdlIHBsdWdpbi5cbiAgICogVGhlIG5hbWVzcGFjZSB3aWxsIGVsaW1pbmF0ZSB0aGUgY29uZmxpY3QgYmV0d2VlbiBrZXlzIHRoYXQgbWlnaHQgb3ZlcmxhcC5cbiAgICovXG4gIG5hbWVzcGFjZT86IHN0cmluZztcblxuICAvKipcbiAgICogU3RvcmFnZSBlbmdpbmUgdG8gdXNlLiBEZWF1bHRzIHRvIGxvY2FsU3RvcmFnZSBidXQgY2FuIHByb3ZpZGVcbiAgICpcbiAgICogc2Vzc2lvblN0b3JhZ2Ugb3IgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIHRoZSBTdG9yYWdlRW5naW5lIGludGVyZmFjZVxuICAgKi9cbiAgc3RvcmFnZT86IFN0b3JhZ2VPcHRpb247XG5cbiAgLyoqXG4gICAqIE1pZ3JhdGlvbiBzdHJhdGVnaWVzLlxuICAgKi9cbiAgbWlncmF0aW9ucz86IHtcbiAgICAvKipcbiAgICAgKiBWZXJzaW9uIHRvIGtleSBvZmYuXG4gICAgICovXG4gICAgdmVyc2lvbjogbnVtYmVyIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIG1pZ3JhdGUgdGhlIHByZXZpb3VzIHN0YXRlLlxuICAgICAqL1xuICAgIG1pZ3JhdGU6IChzdGF0ZTogYW55KSA9PiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBLZXkgdG8gbWlncmF0ZS5cbiAgICAgKi9cbiAgICBrZXk/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBLZXkgZm9yIHRoZSB2ZXJzaW9uLiBEZWZhdWx0cyB0byAndmVyc2lvbicuXG4gICAgICovXG4gICAgdmVyc2lvbktleT86IHN0cmluZztcbiAgfVtdO1xuXG4gIC8qKlxuICAgKiBTZXJhaWxpemVyIGZvciB0aGUgb2JqZWN0IGJlZm9yZSBpdHMgcHVzaGVkIGludG8gdGhlIGVuZ2luZS5cbiAgICovXG4gIHNlcmlhbGl6ZT8ob2JqOiBhbnkpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplciBmb3IgdGhlIG9iamVjdCBiZWZvcmUgaXRzIHB1bGxlZCBvdXQgb2YgdGhlIGVuZ2luZS5cbiAgICovXG4gIGRlc2VyaWFsaXplPyhvYmo6IGFueSk6IGFueTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIGFsdGVyIG9iamVjdCBiZWZvcmUgc2VyaWFsaXphdGlvbi5cbiAgICovXG4gIGJlZm9yZVNlcmlhbGl6ZT8ob2JqOiBhbnksIGtleTogc3RyaW5nKTogYW55O1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gYWx0ZXIgb2JqZWN0IGFmdGVyIGRlc2VyaWFsaXphdGlvbi5cbiAgICovXG4gIGFmdGVyRGVzZXJpYWxpemU/KG9iajogYW55LCBrZXk6IHN0cmluZyk6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSDJtU5neHNUcmFuc2Zvcm1lZFN0b3JhZ2VQbHVnaW5PcHRpb25zIGV4dGVuZHMgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIHtcbiAga2V5czogU3RvcmFnZUtleVtdO1xufVxuXG5leHBvcnQgY29uc3QgybVVU0VSX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48Tmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zPihcbiAgTkdfREVWX01PREUgPyAnVVNFUl9PUFRJT05TJyA6ICcnXG4pO1xuXG4vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYWxsIHN0YXRlcyBpbiB0aGUgTkdYUyByZWdpc3RyeSBzaG91bGQgYmUgcGVyc2lzdGVkIG9yIG5vdC5cbmV4cG9ydCBjb25zdCDJtUFMTF9TVEFURVNfUEVSU0lTVEVEID0gbmV3IEluamVjdGlvblRva2VuPGJvb2xlYW4+KFxuICBOR19ERVZfTU9ERSA/ICdBTExfU1RBVEVTX1BFUlNJU1RFRCcgOiAnJyxcbiAge1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiAoKSA9PiBpbmplY3QoybVVU0VSX09QVElPTlMpLmtleXMgPT09ICcqJ1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgybVOR1hTX1NUT1JBR0VfUExVR0lOX09QVElPTlMgPVxuICBuZXcgSW5qZWN0aW9uVG9rZW48ybVOZ3hzVHJhbnNmb3JtZWRTdG9yYWdlUGx1Z2luT3B0aW9ucz4oXG4gICAgTkdfREVWX01PREUgPyAnTkdYU19TVE9SQUdFX1BMVUdJTl9PUFRJT05TJyA6ICcnXG4gICk7XG5cbmV4cG9ydCBjb25zdCBTVE9SQUdFX0VOR0lORSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTdG9yYWdlRW5naW5lPihcbiAgTkdfREVWX01PREUgPyAnU1RPUkFHRV9FTkdJTkUnIDogJydcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmFnZUVuZ2luZSB7XG4gIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBhbnk7XG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkO1xufVxuIl19